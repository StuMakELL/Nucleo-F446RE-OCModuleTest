
OCModuleTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005184  08005184  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005184  08005184  00015184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800518c  0800518c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080051a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080051a0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e92d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f8  00000000  00000000  0002e969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00030a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  000316f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021709  00000000  00000000  000322c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fb8  00000000  00000000  000539d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cccd8  00000000  00000000  00066989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b4  00000000  00000000  001336b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004fb8 	.word	0x08004fb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004fb8 	.word	0x08004fb8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b61      	ldr	r3, [pc, #388]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a60      	ldr	r2, [pc, #384]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b5e      	ldr	r3, [pc, #376]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b5a      	ldr	r3, [pc, #360]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a59      	ldr	r2, [pc, #356]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b57      	ldr	r3, [pc, #348]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b53      	ldr	r3, [pc, #332]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a52      	ldr	r2, [pc, #328]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b50      	ldr	r3, [pc, #320]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b4c      	ldr	r3, [pc, #304]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a4b      	ldr	r2, [pc, #300]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b49      	ldr	r3, [pc, #292]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4b45      	ldr	r3, [pc, #276]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a44      	ldr	r2, [pc, #272]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b42      	ldr	r3, [pc, #264]	; (80006a8 <MX_GPIO_Init+0x1a0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2120      	movs	r1, #32
 80005ae:	483f      	ldr	r0, [pc, #252]	; (80006ac <MX_GPIO_Init+0x1a4>)
 80005b0:	f001 f91c 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NET_TX_GPIO_Port, NET_TX_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ba:	483d      	ldr	r0, [pc, #244]	; (80006b0 <MX_GPIO_Init+0x1a8>)
 80005bc:	f001 f916 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4619      	mov	r1, r3
 80005d6:	4836      	ldr	r0, [pc, #216]	; (80006b0 <MX_GPIO_Init+0x1a8>)
 80005d8:	f000 fdbe 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005dc:	f641 63ff 	movw	r3, #7935	; 0x1eff
 80005e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	482f      	ldr	r0, [pc, #188]	; (80006b0 <MX_GPIO_Init+0x1a8>)
 80005f2:	f000 fdb1 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80005f6:	f649 63d3 	movw	r3, #40659	; 0x9ed3
 80005fa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fc:	2303      	movs	r3, #3
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4828      	ldr	r0, [pc, #160]	; (80006ac <MX_GPIO_Init+0x1a4>)
 800060c:	f000 fda4 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000610:	2320      	movs	r3, #32
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4619      	mov	r1, r3
 8000626:	4821      	ldr	r0, [pc, #132]	; (80006ac <MX_GPIO_Init+0x1a4>)
 8000628:	f000 fd96 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800062c:	f24f 73f7 	movw	r3, #63479	; 0xf7f7
 8000630:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000632:	2303      	movs	r3, #3
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <MX_GPIO_Init+0x1ac>)
 8000642:	f000 fd89 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NET_TX_Pin;
 8000646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NET_TX_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <MX_GPIO_Init+0x1a8>)
 8000660:	f000 fd7a 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <MX_GPIO_Init+0x1a4>)
 8000682:	f000 fd69 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000686:	2304      	movs	r3, #4
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068a:	2303      	movs	r3, #3
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <MX_GPIO_Init+0x1b0>)
 800069a:	f000 fd5d 	bl	8001158 <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	; 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020800 	.word	0x40020800
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020c00 	.word	0x40020c00

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c2:	f000 fb73 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c6:	f000 f887 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f7ff ff1d 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ce:	f000 fad1 	bl	8000c74 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006d2:	f000 fa33 	bl	8000b3c <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        switch (appState)
 80006d6:	4b39      	ldr	r3, [pc, #228]	; (80007bc <main+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <main+0x28>
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d01e      	beq.n	8000720 <main+0x64>
                }
            }

            default:
            {
                break;
 80006e2:	e069      	b.n	80007b8 <main+0xfc>
                if (HAL_TIM_Base_Start(&htim3) == HAL_OK)
 80006e4:	4836      	ldr	r0, [pc, #216]	; (80007c0 <main+0x104>)
 80006e6:	f002 fa0d 	bl	8002b04 <HAL_TIM_Base_Start>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d162      	bne.n	80007b6 <main+0xfa>
                    btnPrevState = HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin);
 80006f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f4:	4833      	ldr	r0, [pc, #204]	; (80007c4 <main+0x108>)
 80006f6:	f001 f853 	bl	80017a0 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <main+0x10c>)
 8000708:	701a      	strb	r2, [r3, #0]
                    ocState = OC_IDLE;
 800070a:	4b30      	ldr	r3, [pc, #192]	; (80007cc <main+0x110>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
                    HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000710:	2108      	movs	r1, #8
 8000712:	482b      	ldr	r0, [pc, #172]	; (80007c0 <main+0x104>)
 8000714:	f002 fbae 	bl	8002e74 <HAL_TIM_OC_Start_IT>
                    appState = APP_STATE_TASKS;
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <main+0x100>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
                break;
 800071e:	e04a      	b.n	80007b6 <main+0xfa>
                switch (ocState)
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <main+0x110>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b02      	cmp	r3, #2
 8000728:	d03d      	beq.n	80007a6 <main+0xea>
 800072a:	2b02      	cmp	r3, #2
 800072c:	dc3f      	bgt.n	80007ae <main+0xf2>
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <main+0x7a>
 8000732:	2b01      	cmp	r3, #1
                        break;
 8000734:	e03e      	b.n	80007b4 <main+0xf8>
                        bool btn = HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin);
 8000736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073a:	4822      	ldr	r0, [pc, #136]	; (80007c4 <main+0x108>)
 800073c:	f001 f830 	bl	80017a0 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	bf14      	ite	ne
 8000746:	2301      	movne	r3, #1
 8000748:	2300      	moveq	r3, #0
 800074a:	71fb      	strb	r3, [r7, #7]
                        if (btn != btnPrevState)
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <main+0x10c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	429a      	cmp	r2, r3
 8000754:	d02d      	beq.n	80007b2 <main+0xf6>
                            HAL_Delay(100);
 8000756:	2064      	movs	r0, #100	; 0x64
 8000758:	f000 fb9a 	bl	8000e90 <HAL_Delay>
                            if (!btn)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d01a      	beq.n	800079e <main+0xe2>
                                if (!HAL_GPIO_ReadPin( B1_GPIO_Port, B1_Pin))
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4815      	ldr	r0, [pc, #84]	; (80007c4 <main+0x108>)
 800076e:	f001 f817 	bl	80017a0 <HAL_GPIO_ReadPin>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d112      	bne.n	800079e <main+0xe2>
                                    txBuffer[0] = 0xAA;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <main+0x114>)
 800077a:	22aa      	movs	r2, #170	; 0xaa
 800077c:	601a      	str	r2, [r3, #0]
                                    txBuffer[1] = 0x55;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <main+0x114>)
 8000780:	2255      	movs	r2, #85	; 0x55
 8000782:	605a      	str	r2, [r3, #4]
                                    txLength = 12;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <main+0x118>)
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
                                    htim3.Instance->CCR3 = htim3.Instance->CNT + 100;
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <main+0x104>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <main+0x104>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3264      	adds	r2, #100	; 0x64
 8000796:	63da      	str	r2, [r3, #60]	; 0x3c
                                    ocState = OC_RUN;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <main+0x110>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
                            btnPrevState = btn;
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <main+0x10c>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	7013      	strb	r3, [r2, #0]
                        break;
 80007a4:	e005      	b.n	80007b2 <main+0xf6>
                        ocState = OC_IDLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <main+0x110>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
                        break;
 80007ac:	e002      	b.n	80007b4 <main+0xf8>
                        break;
 80007ae:	bf00      	nop
 80007b0:	e002      	b.n	80007b8 <main+0xfc>
                        break;
 80007b2:	bf00      	nop
                break;
 80007b4:	e000      	b.n	80007b8 <main+0xfc>
                break;
 80007b6:	bf00      	nop
        switch (appState)
 80007b8:	e78d      	b.n	80006d6 <main+0x1a>
 80007ba:	bf00      	nop
 80007bc:	20000060 	.word	0x20000060
 80007c0:	2000006c 	.word	0x2000006c
 80007c4:	40020800 	.word	0x40020800
 80007c8:	20000064 	.word	0x20000064
 80007cc:	2000005c 	.word	0x2000005c
 80007d0:	20000028 	.word	0x20000028
 80007d4:	20000058 	.word	0x20000058

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fbde 	bl	8004fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <SystemClock_Config+0xe8>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <SystemClock_Config+0xe8>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <SystemClock_Config+0xe8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <SystemClock_Config+0xec>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <SystemClock_Config+0xec>)
 8000822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <SystemClock_Config+0xec>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000848:	2308      	movs	r3, #8
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800084c:	23b4      	movs	r3, #180	; 0xb4
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fd03 	bl	800226c <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800086c:	f000 f8e8 	bl	8000a40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000870:	f000 ffee 	bl	8001850 <HAL_PWREx_EnableOverDrive>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800087a:	f000 f8e1 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	230f      	movs	r3, #15
 8000880:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2302      	movs	r3, #2
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800088a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2105      	movs	r1, #5
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f827 	bl	80018f0 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008a8:	f000 f8ca 	bl	8000a40 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_2);
 80008ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008b0:	2100      	movs	r1, #0
 80008b2:	2000      	movs	r0, #0
 80008b4:	f001 f9c2 	bl	8001c3c <HAL_RCC_MCOConfig>
}
 80008b8:	bf00      	nop
 80008ba:	3750      	adds	r7, #80	; 0x50
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    if (htim == &htim3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a54      	ldr	r2, [pc, #336]	; (8000a24 <HAL_TIM_OC_DelayElapsedCallback+0x15c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	f040 80a0 	bne.w	8000a1a <HAL_TIM_OC_DelayElapsedCallback+0x152>
    {
        if (ocState == OC_RUN)
 80008da:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	f040 809a 	bne.w	8000a1a <HAL_TIM_OC_DelayElapsedCallback+0x152>
        {
            static uint8_t step = 0;
            static uint32_t bitCounter = 0;
            uint16_t period = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	81fb      	strh	r3, [r7, #14]
            uint16_t timer = htim->Instance->CNT;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f0:	817b      	strh	r3, [r7, #10]
            uint8_t bytePos = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	727b      	strb	r3, [r7, #9]
            uint8_t bitPos = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	723b      	strb	r3, [r7, #8]
            bool pinState = false;
 80008fa:	2300      	movs	r3, #0
 80008fc:	737b      	strb	r3, [r7, #13]

            switch (step)
 80008fe:	4b4b      	ldr	r3, [pc, #300]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d86d      	bhi.n	80009e2 <HAL_TIM_OC_DelayElapsedCallback+0x11a>
 8000906:	a201      	add	r2, pc, #4	; (adr r2, 800090c <HAL_TIM_OC_DelayElapsedCallback+0x44>)
 8000908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090c:	08000921 	.word	0x08000921
 8000910:	0800093d 	.word	0x0800093d
 8000914:	08000955 	.word	0x08000955
 8000918:	0800097f 	.word	0x0800097f
 800091c:	080009cb 	.word	0x080009cb
            {
                case 0:
                    period = PULSE_TIME;
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	81fb      	strh	r3, [r7, #14]
                    pinState = true;
 8000924:	2301      	movs	r3, #1
 8000926:	737b      	strb	r3, [r7, #13]
                    bitCounter = 0;
 8000928:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
                    step++;
 800092e:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000938:	701a      	strb	r2, [r3, #0]
                    break;
 800093a:	e056      	b.n	80009ea <HAL_TIM_OC_DelayElapsedCallback+0x122>

                case 1:
                    period = START_TIME;
 800093c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000940:	81fb      	strh	r3, [r7, #14]
                    pinState = false;
 8000942:	2300      	movs	r3, #0
 8000944:	737b      	strb	r3, [r7, #13]
                    step++;
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000950:	701a      	strb	r2, [r3, #0]
                    break;
 8000952:	e04a      	b.n	80009ea <HAL_TIM_OC_DelayElapsedCallback+0x122>

                case 2:
                    period = PULSE_TIME;
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	81fb      	strh	r3, [r7, #14]
                    pinState = true;
 8000958:	2301      	movs	r3, #1
 800095a:	737b      	strb	r3, [r7, #13]
                    step += bitCounter == txLength ? 2 : 1;
 800095c:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <HAL_TIM_OC_DelayElapsedCallback+0x16c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	d101      	bne.n	800096c <HAL_TIM_OC_DelayElapsedCallback+0xa4>
 8000968:	2302      	movs	r3, #2
 800096a:	e000      	b.n	800096e <HAL_TIM_OC_DelayElapsedCallback+0xa6>
 800096c:	2301      	movs	r3, #1
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 800097a:	701a      	strb	r2, [r3, #0]
                    break;
 800097c:	e035      	b.n	80009ea <HAL_TIM_OC_DelayElapsedCallback+0x122>

                case 3:
                    bytePos = bitCounter >> 3;
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	727b      	strb	r3, [r7, #9]
                    bitPos = bitCounter & 0x07;
 8000986:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	723b      	strb	r3, [r7, #8]

                    period = (1 << bitPos) & (txBuffer[bytePos]) ? HI_TIME : LO_TIME;
 8000992:	7a3b      	ldrb	r3, [r7, #8]
 8000994:	2201      	movs	r2, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	4619      	mov	r1, r3
 800099c:	7a7b      	ldrb	r3, [r7, #9]
 800099e:	4a26      	ldr	r2, [pc, #152]	; (8000a38 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 80009a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a4:	400b      	ands	r3, r1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <HAL_TIM_OC_DelayElapsedCallback+0xe8>
 80009aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009ae:	e000      	b.n	80009b2 <HAL_TIM_OC_DelayElapsedCallback+0xea>
 80009b0:	23c8      	movs	r3, #200	; 0xc8
 80009b2:	81fb      	strh	r3, [r7, #14]
                    pinState = false;
 80009b4:	2300      	movs	r3, #0
 80009b6:	737b      	strb	r3, [r7, #13]
                    bitCounter++;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <HAL_TIM_OC_DelayElapsedCallback+0x168>)
 80009c0:	6013      	str	r3, [r2, #0]
                    step = 2;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	701a      	strb	r2, [r3, #0]
                    break;
 80009c8:	e00f      	b.n	80009ea <HAL_TIM_OC_DelayElapsedCallback+0x122>
                case 4:
                    period = START_TIME;
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	81fb      	strh	r3, [r7, #14]
                    pinState = false;
 80009d0:	2300      	movs	r3, #0
 80009d2:	737b      	strb	r3, [r7, #13]
                    step++;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 80009de:	701a      	strb	r2, [r3, #0]
                    break;
 80009e0:	e003      	b.n	80009ea <HAL_TIM_OC_DelayElapsedCallback+0x122>

                default:
                    ocState = OC_DONE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	701a      	strb	r2, [r3, #0]
                    break;
 80009e8:	bf00      	nop

            }

            if (ocState == OC_DONE)
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_TIM_OC_DelayElapsedCallback+0x160>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d105      	bne.n	8000a00 <HAL_TIM_OC_DelayElapsedCallback+0x138>
            {
                pinState = GPIO_PIN_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	737b      	strb	r3, [r7, #13]
                step = 0;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_TIM_OC_DelayElapsedCallback+0x164>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e005      	b.n	8000a0c <HAL_TIM_OC_DelayElapsedCallback+0x144>
            }
            else
            {
                htim->Instance->CCR3 = timer + period;
 8000a00:	897a      	ldrh	r2, [r7, #10]
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	441a      	add	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
            }
            HAL_GPIO_WritePin(NET_TX_GPIO_Port, NET_TX_Pin, pinState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a0c:	7b7b      	ldrb	r3, [r7, #13]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000a16:	f000 fee9 	bl	80017ec <HAL_GPIO_WritePin>
        }
    }
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000006c 	.word	0x2000006c
 8000a28:	2000005c 	.word	0x2000005c
 8000a2c:	20000065 	.word	0x20000065
 8000a30:	20000068 	.word	0x20000068
 8000a34:	20000058 	.word	0x20000058
 8000a38:	20000028 	.word	0x20000028
 8000a3c:	40020800 	.word	0x40020800

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>

08000a4a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <HAL_MspInit+0x4c>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <HAL_MspInit+0x4c>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	; 0x44
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x4c>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x4c>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f000 faea 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f9a8 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <TIM3_IRQHandler+0x10>)
 8000b0a:	f002 fb89 	bl	8003220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000006c 	.word	0x2000006c

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000b6e:	4a2c      	ldr	r2, [pc, #176]	; (8000c20 <MX_TIM3_Init+0xe4>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1800;
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000b74:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8000b78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b80:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b94:	4821      	ldr	r0, [pc, #132]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000b96:	f001 fec5 	bl	8002924 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f7ff ff4e 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481a      	ldr	r0, [pc, #104]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000bb2:	f002 fdaf 	bl	8003714 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f7ff ff40 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000bc0:	4816      	ldr	r0, [pc, #88]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000bc2:	f002 f85d 	bl	8002c80 <HAL_TIM_OC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f7ff ff38 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480f      	ldr	r0, [pc, #60]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000be0:	f003 fd38 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bea:	f7ff ff29 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2208      	movs	r2, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_TIM3_Init+0xe0>)
 8000c06:	f002 fc13 	bl	8003430 <HAL_TIM_OC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c10:	f7ff ff16 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	; 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000006c 	.word	0x2000006c
 8000c20:	40000400 	.word	0x40000400

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d115      	bne.n	8000c62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_TIM_Base_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <HAL_TIM_Base_MspInit+0x4c>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_TIM_Base_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	201d      	movs	r0, #29
 8000c58:	f000 fa2e 	bl	80010b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c5c:	201d      	movs	r0, #29
 8000c5e:	f000 fa57 	bl	8001110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40000400 	.word	0x40000400
 8000c70:	40023800 	.word	0x40023800

08000c74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART2_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000cac:	f003 fdc4 	bl	8004838 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f7ff fec3 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000b4 	.word	0x200000b4
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12b      	bne.n	8000d42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_UART_MspInit+0x88>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d22:	230c      	movs	r3, #12
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d32:	2307      	movs	r3, #7
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0x8c>)
 8000d3e:	f000 fa0b 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d82:	f7ff fec9 	bl	8000b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f004 f8eb 	bl	8004f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fc97 	bl	80006bc <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d9c:	08005194 	.word	0x08005194
  ldr r2, =_sbss
 8000da0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000da4:	200000fc 	.word	0x200000fc

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f94f 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fe3e 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f996 	bl	8001140 <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f944 	bl	80010b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	200000f8 	.word	0x200000f8

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000f8 	.word	0x200000f8

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b07      	cmp	r3, #7
 8001084:	d00f      	beq.n	80010a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b06      	cmp	r3, #6
 800108a:	d00c      	beq.n	80010a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b05      	cmp	r3, #5
 8001090:	d009      	beq.n	80010a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b04      	cmp	r3, #4
 8001096:	d006      	beq.n	80010a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d003      	beq.n	80010a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800109e:	2190      	movs	r1, #144	; 0x90
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80010a2:	f7ff fcd2 	bl	8000a4a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ff16 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	08004fd0 	.word	0x08004fd0

080010b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d903      	bls.n	80010d8 <HAL_NVIC_SetPriority+0x20>
 80010d0:	21a8      	movs	r1, #168	; 0xa8
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <HAL_NVIC_SetPriority+0x54>)
 80010d4:	f7ff fcb9 	bl	8000a4a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	d903      	bls.n	80010e6 <HAL_NVIC_SetPriority+0x2e>
 80010de:	21a9      	movs	r1, #169	; 0xa9
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <HAL_NVIC_SetPriority+0x54>)
 80010e2:	f7ff fcb2 	bl	8000a4a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e6:	f7ff ff1b 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	6978      	ldr	r0, [r7, #20]
 80010f2:	f7ff ff6b 	bl	8000fcc <NVIC_EncodePriority>
 80010f6:	4602      	mov	r2, r0
 80010f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fc:	4611      	mov	r1, r2
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff3a 	bl	8000f78 <__NVIC_SetPriority>
}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08004fd0 	.word	0x08004fd0

08001110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	da03      	bge.n	800112a <HAL_NVIC_EnableIRQ+0x1a>
 8001122:	21bc      	movs	r1, #188	; 0xbc
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_NVIC_EnableIRQ+0x2c>)
 8001126:	f7ff fc90 	bl	8000a4a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff04 	bl	8000f3c <__NVIC_EnableIRQ>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	08004fd0 	.word	0x08004fd0

08001140 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff73 	bl	8001034 <SysTick_Config>
 800114e:	4603      	mov	r3, r0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a37      	ldr	r2, [pc, #220]	; (8001250 <HAL_GPIO_Init+0xf8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a36      	ldr	r2, [pc, #216]	; (8001254 <HAL_GPIO_Init+0xfc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01b      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a35      	ldr	r2, [pc, #212]	; (8001258 <HAL_GPIO_Init+0x100>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d017      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a34      	ldr	r2, [pc, #208]	; (800125c <HAL_GPIO_Init+0x104>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a33      	ldr	r2, [pc, #204]	; (8001260 <HAL_GPIO_Init+0x108>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00f      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a32      	ldr	r2, [pc, #200]	; (8001264 <HAL_GPIO_Init+0x10c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a31      	ldr	r2, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x110>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a30      	ldr	r2, [pc, #192]	; (800126c <HAL_GPIO_Init+0x114>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 80011ae:	21ac      	movs	r1, #172	; 0xac
 80011b0:	482f      	ldr	r0, [pc, #188]	; (8001270 <HAL_GPIO_Init+0x118>)
 80011b2:	f7ff fc4a 	bl	8000a4a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_GPIO_Init+0x74>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0c1b      	lsrs	r3, r3, #16
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x7c>
 80011cc:	21ad      	movs	r1, #173	; 0xad
 80011ce:	4828      	ldr	r0, [pc, #160]	; (8001270 <HAL_GPIO_Init+0x118>)
 80011d0:	f7ff fc3b 	bl	8000a4a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d035      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d031      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b11      	cmp	r3, #17
 80011ea:	d02d      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d029      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b12      	cmp	r3, #18
 80011fa:	d025      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001204:	d020      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800120e:	d01b      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001218:	d016      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001222:	d011      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800122c:	d00c      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
 8001240:	21ae      	movs	r1, #174	; 0xae
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_GPIO_Init+0x118>)
 8001244:	f7ff fc01 	bl	8000a4a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	e289      	b.n	8001762 <HAL_GPIO_Init+0x60a>
 800124e:	bf00      	nop
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40021400 	.word	0x40021400
 8001268:	40021800 	.word	0x40021800
 800126c:	40021c00 	.word	0x40021c00
 8001270:	0800500c 	.word	0x0800500c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8265 	bne.w	800175c <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d144      	bne.n	8001334 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00f      	beq.n	80012d2 <HAL_GPIO_Init+0x17a>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d00b      	beq.n	80012d2 <HAL_GPIO_Init+0x17a>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x17a>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x17a>
 80012ca:	21c0      	movs	r1, #192	; 0xc0
 80012cc:	4831      	ldr	r0, [pc, #196]	; (8001394 <HAL_GPIO_Init+0x23c>)
 80012ce:	f7ff fbbc 	bl	8000a4a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d02b      	beq.n	8001398 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <HAL_GPIO_Init+0x208>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0x208>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x208>
 8001358:	21d1      	movs	r1, #209	; 0xd1
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <HAL_GPIO_Init+0x23c>)
 800135c:	f7ff fb75 	bl	8000a4a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001392:	bf00      	nop
 8001394:	0800500c 	.word	0x0800500c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	f040 810c 	bne.w	80015be <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 80e3 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	f000 80de 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80d9 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80d4 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80cf 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80ca 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	f000 80c5 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f000 80c0 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	f000 80bb 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b02      	cmp	r3, #2
 8001406:	f000 80b6 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b02      	cmp	r3, #2
 8001410:	f000 80b1 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b03      	cmp	r3, #3
 800141a:	f000 80ac 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b04      	cmp	r3, #4
 8001424:	f000 80a7 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b04      	cmp	r3, #4
 800142e:	f000 80a2 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b04      	cmp	r3, #4
 8001438:	f000 809d 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b05      	cmp	r3, #5
 8001442:	f000 8098 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b05      	cmp	r3, #5
 800144c:	f000 8093 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	2b09      	cmp	r3, #9
 8001456:	f000 808e 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b06      	cmp	r3, #6
 8001460:	f000 8089 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	2b09      	cmp	r3, #9
 800146a:	f000 8084 	beq.w	8001576 <HAL_GPIO_Init+0x41e>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b07      	cmp	r3, #7
 8001474:	d07f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d07b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b07      	cmp	r3, #7
 8001484:	d077      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b08      	cmp	r3, #8
 800148c:	d073      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b08      	cmp	r3, #8
 8001494:	d06f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d06b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b09      	cmp	r3, #9
 80014a4:	d067      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	d063      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b0a      	cmp	r3, #10
 80014b4:	d05f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b0a      	cmp	r3, #10
 80014bc:	d05b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b0b      	cmp	r3, #11
 80014c4:	d057      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d053      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d04f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b0d      	cmp	r3, #13
 80014dc:	d04b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d047      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d043      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d03f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d03b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d037      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d033      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d02f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d02b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d027      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b07      	cmp	r3, #7
 800152c:	d023      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b07      	cmp	r3, #7
 8001534:	d01f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d01b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b07      	cmp	r3, #7
 8001544:	d017      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b08      	cmp	r3, #8
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d00f      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b09      	cmp	r3, #9
 800155c:	d00b      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	2b0a      	cmp	r3, #10
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x41e>
 800156e:	21de      	movs	r1, #222	; 0xde
 8001570:	4880      	ldr	r0, [pc, #512]	; (8001774 <HAL_GPIO_Init+0x61c>)
 8001572:	f7ff fa6a 	bl	8000a4a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	69b9      	ldr	r1, [r7, #24]
 80015ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0203 	and.w	r2, r3, #3
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 80ae 	beq.w	800175c <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <HAL_GPIO_Init+0x620>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	4a5b      	ldr	r2, [pc, #364]	; (8001778 <HAL_GPIO_Init+0x620>)
 800160a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160e:	6453      	str	r3, [r2, #68]	; 0x44
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_GPIO_Init+0x620>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800161c:	4a57      	ldr	r2, [pc, #348]	; (800177c <HAL_GPIO_Init+0x624>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_GPIO_Init+0x628>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d025      	beq.n	8001694 <HAL_GPIO_Init+0x53c>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4e      	ldr	r2, [pc, #312]	; (8001784 <HAL_GPIO_Init+0x62c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d01f      	beq.n	8001690 <HAL_GPIO_Init+0x538>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4d      	ldr	r2, [pc, #308]	; (8001788 <HAL_GPIO_Init+0x630>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d019      	beq.n	800168c <HAL_GPIO_Init+0x534>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_GPIO_Init+0x634>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_GPIO_Init+0x530>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <HAL_GPIO_Init+0x638>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x52c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a4a      	ldr	r2, [pc, #296]	; (8001794 <HAL_GPIO_Init+0x63c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x528>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a49      	ldr	r2, [pc, #292]	; (8001798 <HAL_GPIO_Init+0x640>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x524>
 8001678:	2306      	movs	r3, #6
 800167a:	e00c      	b.n	8001696 <HAL_GPIO_Init+0x53e>
 800167c:	2307      	movs	r3, #7
 800167e:	e00a      	b.n	8001696 <HAL_GPIO_Init+0x53e>
 8001680:	2305      	movs	r3, #5
 8001682:	e008      	b.n	8001696 <HAL_GPIO_Init+0x53e>
 8001684:	2304      	movs	r3, #4
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x53e>
 8001688:	2303      	movs	r3, #3
 800168a:	e004      	b.n	8001696 <HAL_GPIO_Init+0x53e>
 800168c:	2302      	movs	r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x53e>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_GPIO_Init+0x53e>
 8001694:	2300      	movs	r3, #0
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	f002 0203 	and.w	r2, r2, #3
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	4093      	lsls	r3, r2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a6:	4935      	ldr	r1, [pc, #212]	; (800177c <HAL_GPIO_Init+0x624>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b4:	4b39      	ldr	r3, [pc, #228]	; (800179c <HAL_GPIO_Init+0x644>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_GPIO_Init+0x644>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_GPIO_Init+0x644>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001702:	4a26      	ldr	r2, [pc, #152]	; (800179c <HAL_GPIO_Init+0x644>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_GPIO_Init+0x644>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_GPIO_Init+0x644>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_GPIO_Init+0x644>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001756:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_GPIO_Init+0x644>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	3301      	adds	r3, #1
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	f67f ad85 	bls.w	8001274 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800176a:	bf00      	nop
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0800500c 	.word	0x0800500c
 8001778:	40023800 	.word	0x40023800
 800177c:	40013800 	.word	0x40013800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	40020800 	.word	0x40020800
 800178c:	40020c00 	.word	0x40020c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40021400 	.word	0x40021400
 8001798:	40021800 	.word	0x40021800
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_GPIO_ReadPin+0x1c>
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_GPIO_ReadPin+0x26>
 80017bc:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <HAL_GPIO_ReadPin+0x48>)
 80017c2:	f7ff f942 	bl	8000a4a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	e001      	b.n	80017dc <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	0800500c 	.word	0x0800500c

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d004      	beq.n	800180c <HAL_GPIO_WritePin+0x20>
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_GPIO_WritePin+0x2a>
 800180c:	f240 119d 	movw	r1, #413	; 0x19d
 8001810:	480e      	ldr	r0, [pc, #56]	; (800184c <HAL_GPIO_WritePin+0x60>)
 8001812:	f7ff f91a 	bl	8000a4a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001816:	787b      	ldrb	r3, [r7, #1]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_GPIO_WritePin+0x40>
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d004      	beq.n	800182c <HAL_GPIO_WritePin+0x40>
 8001822:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001826:	4809      	ldr	r0, [pc, #36]	; (800184c <HAL_GPIO_WritePin+0x60>)
 8001828:	f7ff f90f 	bl	8000a4a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	0800500c 	.word	0x0800500c

08001850 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800187c:	f7ff fafc 	bl	8000e78 <HAL_GetTick>
 8001880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001882:	e009      	b.n	8001898 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001884:	f7ff faf8 	bl	8000e78 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001892:	d901      	bls.n	8001898 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e01f      	b.n	80018d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d1ee      	bne.n	8001884 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ac:	f7ff fae4 	bl	8000e78 <HAL_GetTick>
 80018b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018b2:	e009      	b.n	80018c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018b4:	f7ff fae0 	bl	8000e78 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c2:	d901      	bls.n	80018c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e007      	b.n	80018d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018d4:	d1ee      	bne.n	80018b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	420e0040 	.word	0x420e0040
 80018e8:	40007000 	.word	0x40007000
 80018ec:	420e0044 	.word	0x420e0044

080018f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e18c      	b.n	8001c1e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_RCC_ClockConfig+0x24>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d904      	bls.n	800191e <HAL_RCC_ClockConfig+0x2e>
 8001914:	f240 215a 	movw	r1, #602	; 0x25a
 8001918:	4887      	ldr	r0, [pc, #540]	; (8001b38 <HAL_RCC_ClockConfig+0x248>)
 800191a:	f7ff f896 	bl	8000a4a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d031      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d02e      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d02b      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d028      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d025      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d022      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b06      	cmp	r3, #6
 8001946:	d01f      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b07      	cmp	r3, #7
 800194c:	d01c      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d019      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b09      	cmp	r3, #9
 8001958:	d016      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b0a      	cmp	r3, #10
 800195e:	d013      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b0b      	cmp	r3, #11
 8001964:	d010      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d00d      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b0d      	cmp	r3, #13
 8001970:	d00a      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b0e      	cmp	r3, #14
 8001976:	d007      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	d004      	beq.n	8001988 <HAL_RCC_ClockConfig+0x98>
 800197e:	f240 215b 	movw	r1, #603	; 0x25b
 8001982:	486d      	ldr	r0, [pc, #436]	; (8001b38 <HAL_RCC_ClockConfig+0x248>)
 8001984:	f7ff f861 	bl	8000a4a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_ClockConfig+0x24c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d90c      	bls.n	80019b0 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b69      	ldr	r3, [pc, #420]	; (8001b3c <HAL_RCC_ClockConfig+0x24c>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_ClockConfig+0x24c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e136      	b.n	8001c1e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d049      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 80019ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a56      	ldr	r2, [pc, #344]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 80019e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d024      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b80      	cmp	r3, #128	; 0x80
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b90      	cmp	r3, #144	; 0x90
 8001a02:	d01c      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2ba0      	cmp	r3, #160	; 0xa0
 8001a0a:	d018      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2bb0      	cmp	r3, #176	; 0xb0
 8001a12:	d014      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2bc0      	cmp	r3, #192	; 0xc0
 8001a1a:	d010      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2bd0      	cmp	r3, #208	; 0xd0
 8001a22:	d00c      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2be0      	cmp	r3, #224	; 0xe0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2bf0      	cmp	r3, #240	; 0xf0
 8001a32:	d004      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x14e>
 8001a34:	f240 217e 	movw	r1, #638	; 0x27e
 8001a38:	483f      	ldr	r0, [pc, #252]	; (8001b38 <HAL_RCC_ClockConfig+0x248>)
 8001a3a:	f7ff f806 	bl	8000a4a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	493d      	ldr	r1, [pc, #244]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d059      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x196>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x196>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x196>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d004      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x196>
 8001a7c:	f240 2185 	movw	r1, #645	; 0x285
 8001a80:	482d      	ldr	r0, [pc, #180]	; (8001b38 <HAL_RCC_ClockConfig+0x248>)
 8001a82:	f7fe ffe2 	bl	8000a4a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0bf      	b.n	8001c1e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0af      	b.n	8001c1e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0a7      	b.n	8001c1e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4919      	ldr	r1, [pc, #100]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f9ca 	bl	8000e78 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f9c6 	bl	8000e78 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e08f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_RCC_ClockConfig+0x250>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x24c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d212      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_RCC_ClockConfig+0x24c>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_ClockConfig+0x24c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d007      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e072      	b.n	8001c1e <HAL_RCC_ClockConfig+0x32e>
 8001b38:	08005048 	.word	0x08005048
 8001b3c:	40023c00 	.word	0x40023c00
 8001b40:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d025      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d018      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x29a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b60:	d013      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x29a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001b6a:	d00e      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x29a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x29a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001b7e:	d004      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x29a>
 8001b80:	f240 21c3 	movw	r1, #707	; 0x2c3
 8001b84:	4828      	ldr	r0, [pc, #160]	; (8001c28 <HAL_RCC_ClockConfig+0x338>)
 8001b86:	f7fe ff60 	bl	8000a4a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_RCC_ClockConfig+0x33c>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	4925      	ldr	r1, [pc, #148]	; (8001c2c <HAL_RCC_ClockConfig+0x33c>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d026      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d018      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x2f2>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb8:	d013      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x2f2>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001bc2:	d00e      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x2f2>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x2f2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001bd6:	d004      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x2f2>
 8001bd8:	f240 21ca 	movw	r1, #714	; 0x2ca
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <HAL_RCC_ClockConfig+0x338>)
 8001bde:	f7fe ff34 	bl	8000a4a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x33c>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490e      	ldr	r1, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x33c>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf6:	f000 f909 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x33c>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490a      	ldr	r1, [pc, #40]	; (8001c30 <HAL_RCC_ClockConfig+0x340>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x344>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x348>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f8ea 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08005048 	.word	0x08005048
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	0800516c 	.word	0x0800516c
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_RCC_MCOConfig+0x22>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d004      	beq.n	8001c5e <HAL_RCC_MCOConfig+0x22>
 8001c54:	f240 310b 	movw	r1, #779	; 0x30b
 8001c58:	484e      	ldr	r0, [pc, #312]	; (8001d94 <HAL_RCC_MCOConfig+0x158>)
 8001c5a:	f7fe fef6 	bl	8000a4a <assert_failed>
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d014      	beq.n	8001c8e <HAL_RCC_MCOConfig+0x52>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c6a:	d010      	beq.n	8001c8e <HAL_RCC_MCOConfig+0x52>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001c72:	d00c      	beq.n	8001c8e <HAL_RCC_MCOConfig+0x52>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCC_MCOConfig+0x52>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001c82:	d004      	beq.n	8001c8e <HAL_RCC_MCOConfig+0x52>
 8001c84:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8001c88:	4842      	ldr	r0, [pc, #264]	; (8001d94 <HAL_RCC_MCOConfig+0x158>)
 8001c8a:	f7fe fede 	bl	8000a4a <assert_failed>
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d13d      	bne.n	8001d10 <HAL_RCC_MCOConfig+0xd4>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <HAL_RCC_MCOConfig+0x80>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ca0:	d00c      	beq.n	8001cbc <HAL_RCC_MCOConfig+0x80>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca8:	d008      	beq.n	8001cbc <HAL_RCC_MCOConfig+0x80>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001cb0:	d004      	beq.n	8001cbc <HAL_RCC_MCOConfig+0x80>
 8001cb2:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001cb6:	4837      	ldr	r0, [pc, #220]	; (8001d94 <HAL_RCC_MCOConfig+0x158>)
 8001cb8:	f7fe fec7 	bl	8000a4a <assert_failed>

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6313      	str	r3, [r2, #48]	; 0x30
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4829      	ldr	r0, [pc, #164]	; (8001d9c <HAL_RCC_MCOConfig+0x160>)
 8001cf6:	f7ff fa2f 	bl	8001158 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001cfa:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	430b      	orrs	r3, r1
 8001d08:	4923      	ldr	r1, [pc, #140]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001d0e:	e03d      	b.n	8001d8c <HAL_RCC_MCOConfig+0x150>
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_MCOConfig+0xfc>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d00c      	beq.n	8001d38 <HAL_RCC_MCOConfig+0xfc>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d24:	d008      	beq.n	8001d38 <HAL_RCC_MCOConfig+0xfc>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001d2c:	d004      	beq.n	8001d38 <HAL_RCC_MCOConfig+0xfc>
 8001d2e:	f44f 714a 	mov.w	r1, #808	; 0x328
 8001d32:	4818      	ldr	r0, [pc, #96]	; (8001d94 <HAL_RCC_MCOConfig+0x158>)
 8001d34:	f7fe fe89 	bl	8000a4a <assert_failed>
    __MCO2_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6313      	str	r3, [r2, #48]	; 0x30
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480b      	ldr	r0, [pc, #44]	; (8001da0 <HAL_RCC_MCOConfig+0x164>)
 8001d72:	f7ff f9f1 	bl	8001158 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	00d9      	lsls	r1, r3, #3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	4904      	ldr	r1, [pc, #16]	; (8001d98 <HAL_RCC_MCOConfig+0x15c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	3730      	adds	r7, #48	; 0x30
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	08005048 	.word	0x08005048
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020800 	.word	0x40020800

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4903      	ldr	r1, [pc, #12]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	0800517c 	.word	0x0800517c

08001de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001de8:	f7ff ffdc 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0b5b      	lsrs	r3, r3, #13
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4903      	ldr	r1, [pc, #12]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	0800517c 	.word	0x0800517c

08001e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e10:	b0ae      	sub	sp, #184	; 0xb8
 8001e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e32:	4bcb      	ldr	r3, [pc, #812]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	f200 8206 	bhi.w	800224c <HAL_RCC_GetSysClockFreq+0x440>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e7d 	.word	0x08001e7d
 8001e4c:	0800224d 	.word	0x0800224d
 8001e50:	0800224d 	.word	0x0800224d
 8001e54:	0800224d 	.word	0x0800224d
 8001e58:	08001e85 	.word	0x08001e85
 8001e5c:	0800224d 	.word	0x0800224d
 8001e60:	0800224d 	.word	0x0800224d
 8001e64:	0800224d 	.word	0x0800224d
 8001e68:	08001e8d 	.word	0x08001e8d
 8001e6c:	0800224d 	.word	0x0800224d
 8001e70:	0800224d 	.word	0x0800224d
 8001e74:	0800224d 	.word	0x0800224d
 8001e78:	0800207d 	.word	0x0800207d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4bb9      	ldr	r3, [pc, #740]	; (8002164 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001e82:	e1e7      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e84:	4bb8      	ldr	r3, [pc, #736]	; (8002168 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e8a:	e1e3      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e8c:	4bb4      	ldr	r3, [pc, #720]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e98:	4bb1      	ldr	r3, [pc, #708]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d071      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea4:	4bae      	ldr	r3, [pc, #696]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001eb0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ebc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ec6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	0159      	lsls	r1, r3, #5
 8001ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001edc:	0150      	lsls	r0, r2, #5
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	1a51      	subs	r1, r2, r1
 8001ee6:	6439      	str	r1, [r7, #64]	; 0x40
 8001ee8:	4629      	mov	r1, r5
 8001eea:	eb63 0301 	sbc.w	r3, r3, r1
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001efc:	4649      	mov	r1, r9
 8001efe:	018b      	lsls	r3, r1, #6
 8001f00:	4641      	mov	r1, r8
 8001f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f06:	4641      	mov	r1, r8
 8001f08:	018a      	lsls	r2, r1, #6
 8001f0a:	4641      	mov	r1, r8
 8001f0c:	1a51      	subs	r1, r2, r1
 8001f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f10:	4649      	mov	r1, r9
 8001f12:	eb63 0301 	sbc.w	r3, r3, r1
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f24:	4649      	mov	r1, r9
 8001f26:	00cb      	lsls	r3, r1, #3
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f2e:	4641      	mov	r1, r8
 8001f30:	00ca      	lsls	r2, r1, #3
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	4622      	mov	r2, r4
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3e:	462b      	mov	r3, r5
 8001f40:	460a      	mov	r2, r1
 8001f42:	eb42 0303 	adc.w	r3, r2, r3
 8001f46:	637b      	str	r3, [r7, #52]	; 0x34
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f54:	4629      	mov	r1, r5
 8001f56:	024b      	lsls	r3, r1, #9
 8001f58:	4621      	mov	r1, r4
 8001f5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f5e:	4621      	mov	r1, r4
 8001f60:	024a      	lsls	r2, r1, #9
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001f78:	f7fe f944 	bl	8000204 <__aeabi_uldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f86:	e067      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fa6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001faa:	4622      	mov	r2, r4
 8001fac:	462b      	mov	r3, r5
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0159      	lsls	r1, r3, #5
 8001fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fbc:	0150      	lsls	r0, r2, #5
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	1a51      	subs	r1, r2, r1
 8001fc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fc8:	4629      	mov	r1, r5
 8001fca:	eb63 0301 	sbc.w	r3, r3, r1
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001fdc:	4649      	mov	r1, r9
 8001fde:	018b      	lsls	r3, r1, #6
 8001fe0:	4641      	mov	r1, r8
 8001fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	018a      	lsls	r2, r1, #6
 8001fea:	4641      	mov	r1, r8
 8001fec:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff0:	4649      	mov	r1, r9
 8001ff2:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800200a:	4692      	mov	sl, r2
 800200c:	469b      	mov	fp, r3
 800200e:	4623      	mov	r3, r4
 8002010:	eb1a 0303 	adds.w	r3, sl, r3
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	462b      	mov	r3, r5
 8002018:	eb4b 0303 	adc.w	r3, fp, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800202a:	4629      	mov	r1, r5
 800202c:	028b      	lsls	r3, r1, #10
 800202e:	4621      	mov	r1, r4
 8002030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002034:	4621      	mov	r1, r4
 8002036:	028a      	lsls	r2, r1, #10
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002040:	2200      	movs	r2, #0
 8002042:	673b      	str	r3, [r7, #112]	; 0x70
 8002044:	677a      	str	r2, [r7, #116]	; 0x74
 8002046:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800204a:	f7fe f8db 	bl	8000204 <__aeabi_uldivmod>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4613      	mov	r3, r2
 8002054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002058:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	3301      	adds	r3, #1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800206a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800206e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800207a:	e0eb      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207c:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002088:	4b35      	ldr	r3, [pc, #212]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d06b      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002094:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_RCC_GetSysClockFreq+0x354>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	2200      	movs	r2, #0
 800209c:	66bb      	str	r3, [r7, #104]	; 0x68
 800209e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a6:	663b      	str	r3, [r7, #96]	; 0x60
 80020a8:	2300      	movs	r3, #0
 80020aa:	667b      	str	r3, [r7, #100]	; 0x64
 80020ac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020b0:	4622      	mov	r2, r4
 80020b2:	462b      	mov	r3, r5
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	0159      	lsls	r1, r3, #5
 80020be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c2:	0150      	lsls	r0, r2, #5
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4621      	mov	r1, r4
 80020ca:	1a51      	subs	r1, r2, r1
 80020cc:	61b9      	str	r1, [r7, #24]
 80020ce:	4629      	mov	r1, r5
 80020d0:	eb63 0301 	sbc.w	r3, r3, r1
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020e2:	4659      	mov	r1, fp
 80020e4:	018b      	lsls	r3, r1, #6
 80020e6:	4651      	mov	r1, sl
 80020e8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ec:	4651      	mov	r1, sl
 80020ee:	018a      	lsls	r2, r1, #6
 80020f0:	4651      	mov	r1, sl
 80020f2:	ebb2 0801 	subs.w	r8, r2, r1
 80020f6:	4659      	mov	r1, fp
 80020f8:	eb63 0901 	sbc.w	r9, r3, r1
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002108:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002110:	4690      	mov	r8, r2
 8002112:	4699      	mov	r9, r3
 8002114:	4623      	mov	r3, r4
 8002116:	eb18 0303 	adds.w	r3, r8, r3
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	462b      	mov	r3, r5
 800211e:	eb49 0303 	adc.w	r3, r9, r3
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002130:	4629      	mov	r1, r5
 8002132:	024b      	lsls	r3, r1, #9
 8002134:	4621      	mov	r1, r4
 8002136:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800213a:	4621      	mov	r1, r4
 800213c:	024a      	lsls	r2, r1, #9
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002146:	2200      	movs	r2, #0
 8002148:	65bb      	str	r3, [r7, #88]	; 0x58
 800214a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800214c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002150:	f7fe f858 	bl	8000204 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800215e:	e065      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x420>
 8002160:	40023800 	.word	0x40023800
 8002164:	00f42400 	.word	0x00f42400
 8002168:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216c:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_GetSysClockFreq+0x458>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	2200      	movs	r2, #0
 8002174:	4618      	mov	r0, r3
 8002176:	4611      	mov	r1, r2
 8002178:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800217c:	653b      	str	r3, [r7, #80]	; 0x50
 800217e:	2300      	movs	r3, #0
 8002180:	657b      	str	r3, [r7, #84]	; 0x54
 8002182:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002186:	4642      	mov	r2, r8
 8002188:	464b      	mov	r3, r9
 800218a:	f04f 0000 	mov.w	r0, #0
 800218e:	f04f 0100 	mov.w	r1, #0
 8002192:	0159      	lsls	r1, r3, #5
 8002194:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002198:	0150      	lsls	r0, r2, #5
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4641      	mov	r1, r8
 80021a0:	1a51      	subs	r1, r2, r1
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	4649      	mov	r1, r9
 80021a6:	eb63 0301 	sbc.w	r3, r3, r1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021b8:	4659      	mov	r1, fp
 80021ba:	018b      	lsls	r3, r1, #6
 80021bc:	4651      	mov	r1, sl
 80021be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021c2:	4651      	mov	r1, sl
 80021c4:	018a      	lsls	r2, r1, #6
 80021c6:	4651      	mov	r1, sl
 80021c8:	1a54      	subs	r4, r2, r1
 80021ca:	4659      	mov	r1, fp
 80021cc:	eb63 0501 	sbc.w	r5, r3, r1
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	00eb      	lsls	r3, r5, #3
 80021da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021de:	00e2      	lsls	r2, r4, #3
 80021e0:	4614      	mov	r4, r2
 80021e2:	461d      	mov	r5, r3
 80021e4:	4643      	mov	r3, r8
 80021e6:	18e3      	adds	r3, r4, r3
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	464b      	mov	r3, r9
 80021ec:	eb45 0303 	adc.w	r3, r5, r3
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021fe:	4629      	mov	r1, r5
 8002200:	028b      	lsls	r3, r1, #10
 8002202:	4621      	mov	r1, r4
 8002204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002208:	4621      	mov	r1, r4
 800220a:	028a      	lsls	r2, r1, #10
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002214:	2200      	movs	r2, #0
 8002216:	64bb      	str	r3, [r7, #72]	; 0x48
 8002218:	64fa      	str	r2, [r7, #76]	; 0x4c
 800221a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800221e:	f7fd fff1 	bl	8000204 <__aeabi_uldivmod>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4613      	mov	r3, r2
 8002228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800222c:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_RCC_GetSysClockFreq+0x458>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0f1b      	lsrs	r3, r3, #28
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800223a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800223e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800224a:	e003      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_GetSysClockFreq+0x45c>)
 800224e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002252:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002258:	4618      	mov	r0, r3
 800225a:	37b8      	adds	r7, #184	; 0xb8
 800225c:	46bd      	mov	sp, r7
 800225e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	00f42400 	.word	0x00f42400

0800226c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e347      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d904      	bls.n	8002290 <HAL_RCC_OscConfig+0x24>
 8002286:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 800228a:	4893      	ldr	r0, [pc, #588]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f7fe fbdd 	bl	8000a4a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8096 	beq.w	80023ca <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00e      	beq.n	80022c4 <HAL_RCC_OscConfig+0x58>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ae:	d009      	beq.n	80022c4 <HAL_RCC_OscConfig+0x58>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b8:	d004      	beq.n	80022c4 <HAL_RCC_OscConfig+0x58>
 80022ba:	f640 5115 	movw	r1, #3349	; 0xd15
 80022be:	4886      	ldr	r0, [pc, #536]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f7fe fbc3 	bl	8000a4a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022c4:	4b85      	ldr	r3, [pc, #532]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d019      	beq.n	8002304 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022d0:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e8:	d00c      	beq.n	8002304 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b79      	ldr	r3, [pc, #484]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b75      	ldr	r3, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_RCC_OscConfig+0x15c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d157      	bne.n	80023c8 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e2f8      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0xc8>
 8002326:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6c      	ldr	r2, [pc, #432]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0x104>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0xec>
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a66      	ldr	r2, [pc, #408]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0x104>
 8002358:	4b60      	ldr	r3, [pc, #384]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5c      	ldr	r2, [pc, #368]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fd7e 	bl	8000e78 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fd7a 	bl	8000e78 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e2bd      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b52      	ldr	r3, [pc, #328]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x114>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fd6a 	bl	8000e78 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fd66 	bl	8000e78 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e2a9      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b48      	ldr	r3, [pc, #288]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x13c>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 808c 	beq.w	80024f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_OscConfig+0x186>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d004      	beq.n	80023f2 <HAL_RCC_OscConfig+0x186>
 80023e8:	f640 514d 	movw	r1, #3405	; 0xd4d
 80023ec:	483a      	ldr	r0, [pc, #232]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f7fe fb2c 	bl	8000a4a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b1f      	cmp	r3, #31
 80023f8:	d904      	bls.n	8002404 <HAL_RCC_OscConfig+0x198>
 80023fa:	f640 514e 	movw	r1, #3406	; 0xd4e
 80023fe:	4836      	ldr	r0, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	f7fe fb23 	bl	8000a4a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b00      	cmp	r3, #0
 800240e:	d017      	beq.n	8002440 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002418:	2b08      	cmp	r3, #8
 800241a:	d105      	bne.n	8002428 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800241c:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002428:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d11c      	bne.n	800246e <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x1ec>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e25a      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	491d      	ldr	r1, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246c:	e040      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fcfc 	bl	8000e78 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002484:	f7fe fcf8 	bl	8000e78 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e23b      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	490a      	ldr	r1, [pc, #40]	; (80024dc <HAL_RCC_OscConfig+0x270>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
 80024b6:	e01b      	b.n	80024f0 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_OscConfig+0x274>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fcdb 	bl	8000e78 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c4:	e00e      	b.n	80024e4 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c6:	f7fe fcd7 	bl	8000e78 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d907      	bls.n	80024e4 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e21a      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
 80024d8:	08005080 	.word	0x08005080
 80024dc:	40023800 	.word	0x40023800
 80024e0:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e4:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ea      	bne.n	80024c6 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d03d      	beq.n	8002578 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_OscConfig+0x2aa>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d004      	beq.n	8002516 <HAL_RCC_OscConfig+0x2aa>
 800250c:	f640 5194 	movw	r1, #3476	; 0xd94
 8002510:	486a      	ldr	r0, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x450>)
 8002512:	f7fe fa9a 	bl	8000a4a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x454>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe fca8 	bl	8000e78 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fca4 	bl	8000e78 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1e7      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x2c0>
 800254a:	e015      	b.n	8002578 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254c:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_RCC_OscConfig+0x454>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7fe fc91 	bl	8000e78 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255a:	f7fe fc8d 	bl	8000e78 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1d0      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	4b52      	ldr	r3, [pc, #328]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 800256e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80b0 	beq.w	80026e6 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_RCC_OscConfig+0x340>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d008      	beq.n	80025ac <HAL_RCC_OscConfig+0x340>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d004      	beq.n	80025ac <HAL_RCC_OscConfig+0x340>
 80025a2:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80025a6:	4845      	ldr	r0, [pc, #276]	; (80026bc <HAL_RCC_OscConfig+0x450>)
 80025a8:	f7fe fa4f 	bl	8000a4a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ac:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10f      	bne.n	80025d8 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a3d      	ldr	r2, [pc, #244]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6413      	str	r3, [r2, #64]	; 0x40
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d4:	2301      	movs	r3, #1
 80025d6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_RCC_OscConfig+0x458>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d118      	bne.n	8002616 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e4:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCC_OscConfig+0x458>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a36      	ldr	r2, [pc, #216]	; (80026c4 <HAL_RCC_OscConfig+0x458>)
 80025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f0:	f7fe fc42 	bl	8000e78 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f8:	f7fe fc3e 	bl	8000e78 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e181      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <HAL_RCC_OscConfig+0x458>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d106      	bne.n	800262c <HAL_RCC_OscConfig+0x3c0>
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	4a25      	ldr	r2, [pc, #148]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6713      	str	r3, [r2, #112]	; 0x70
 800262a:	e01c      	b.n	8002666 <HAL_RCC_OscConfig+0x3fa>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x3e2>
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0x3fa>
 800264e:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d015      	beq.n	800269a <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe fc03 	bl	8000e78 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe fbff 	bl	8000e78 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e140      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_RCC_OscConfig+0x44c>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ee      	beq.n	8002676 <HAL_RCC_OscConfig+0x40a>
 8002698:	e01c      	b.n	80026d4 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fe fbed 	bl	8000e78 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	e012      	b.n	80026c8 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fbe9 	bl	8000e78 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d909      	bls.n	80026c8 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e12a      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08005080 	.word	0x08005080
 80026c0:	42470e80 	.word	0x42470e80
 80026c4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b93      	ldr	r3, [pc, #588]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1e6      	bne.n	80026a2 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b8f      	ldr	r3, [pc, #572]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a8e      	ldr	r2, [pc, #568]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00c      	beq.n	8002708 <HAL_RCC_OscConfig+0x49c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d008      	beq.n	8002708 <HAL_RCC_OscConfig+0x49c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d004      	beq.n	8002708 <HAL_RCC_OscConfig+0x49c>
 80026fe:	f640 6103 	movw	r1, #3587	; 0xe03
 8002702:	4886      	ldr	r0, [pc, #536]	; (800291c <HAL_RCC_OscConfig+0x6b0>)
 8002704:	f7fe f9a1 	bl	8000a4a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80fd 	beq.w	800290c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002712:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	f000 80b6 	beq.w	800288c <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b02      	cmp	r3, #2
 8002726:	f040 809a 	bne.w	800285e <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_OscConfig+0x4da>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273a:	d004      	beq.n	8002746 <HAL_RCC_OscConfig+0x4da>
 800273c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8002740:	4876      	ldr	r0, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x6b0>)
 8002742:	f7fe f982 	bl	8000a4a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	2b3f      	cmp	r3, #63	; 0x3f
 800274c:	d904      	bls.n	8002758 <HAL_RCC_OscConfig+0x4ec>
 800274e:	f640 610d 	movw	r1, #3597	; 0xe0d
 8002752:	4872      	ldr	r0, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x6b0>)
 8002754:	f7fe f979 	bl	8000a4a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b31      	cmp	r3, #49	; 0x31
 800275e:	d904      	bls.n	800276a <HAL_RCC_OscConfig+0x4fe>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002768:	d904      	bls.n	8002774 <HAL_RCC_OscConfig+0x508>
 800276a:	f640 610e 	movw	r1, #3598	; 0xe0e
 800276e:	486b      	ldr	r0, [pc, #428]	; (800291c <HAL_RCC_OscConfig+0x6b0>)
 8002770:	f7fe f96b 	bl	8000a4a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	2b02      	cmp	r3, #2
 800277a:	d010      	beq.n	800279e <HAL_RCC_OscConfig+0x532>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	2b04      	cmp	r3, #4
 8002782:	d00c      	beq.n	800279e <HAL_RCC_OscConfig+0x532>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	2b06      	cmp	r3, #6
 800278a:	d008      	beq.n	800279e <HAL_RCC_OscConfig+0x532>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	2b08      	cmp	r3, #8
 8002792:	d004      	beq.n	800279e <HAL_RCC_OscConfig+0x532>
 8002794:	f640 610f 	movw	r1, #3599	; 0xe0f
 8002798:	4860      	ldr	r0, [pc, #384]	; (800291c <HAL_RCC_OscConfig+0x6b0>)
 800279a:	f7fe f956 	bl	8000a4a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d903      	bls.n	80027ae <HAL_RCC_OscConfig+0x542>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2b0f      	cmp	r3, #15
 80027ac:	d904      	bls.n	80027b8 <HAL_RCC_OscConfig+0x54c>
 80027ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80027b2:	485a      	ldr	r0, [pc, #360]	; (800291c <HAL_RCC_OscConfig+0x6b0>)
 80027b4:	f7fe f949 	bl	8000a4a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d903      	bls.n	80027c8 <HAL_RCC_OscConfig+0x55c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	2b07      	cmp	r3, #7
 80027c6:	d904      	bls.n	80027d2 <HAL_RCC_OscConfig+0x566>
 80027c8:	f640 6111 	movw	r1, #3601	; 0xe11
 80027cc:	4853      	ldr	r0, [pc, #332]	; (800291c <HAL_RCC_OscConfig+0x6b0>)
 80027ce:	f7fe f93c 	bl	8000a4a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_OscConfig+0x6b4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fb4e 	bl	8000e78 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fb4a 	bl	8000e78 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e08d      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	493b      	ldr	r1, [pc, #236]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCC_OscConfig+0x6b4>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fb1f 	bl	8000e78 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe fb1b 	bl	8000e78 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e05e      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x5d2>
 800285c:	e056      	b.n	800290c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_OscConfig+0x6b4>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fb08 	bl	8000e78 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fb04 	bl	8000e78 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e047      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x600>
 800288a:	e03f      	b.n	800290c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <HAL_RCC_OscConfig+0x6ac>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d030      	beq.n	8002908 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d129      	bne.n	8002908 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d122      	bne.n	8002908 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d119      	bne.n	8002908 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d10f      	bne.n	8002908 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	08005080 	.word	0x08005080
 8002920:	42470060 	.word	0x42470060

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e0c5      	b.n	8002ac2 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a64      	ldr	r2, [pc, #400]	; (8002acc <HAL_TIM_Base_Init+0x1a8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d045      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d040      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a60      	ldr	r2, [pc, #384]	; (8002ad0 <HAL_TIM_Base_Init+0x1ac>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d03b      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5e      	ldr	r2, [pc, #376]	; (8002ad4 <HAL_TIM_Base_Init+0x1b0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d036      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a5d      	ldr	r2, [pc, #372]	; (8002ad8 <HAL_TIM_Base_Init+0x1b4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d031      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a5b      	ldr	r2, [pc, #364]	; (8002adc <HAL_TIM_Base_Init+0x1b8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02c      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a5a      	ldr	r2, [pc, #360]	; (8002ae0 <HAL_TIM_Base_Init+0x1bc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d027      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_TIM_Base_Init+0x1c0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a57      	ldr	r2, [pc, #348]	; (8002ae8 <HAL_TIM_Base_Init+0x1c4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01d      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a55      	ldr	r2, [pc, #340]	; (8002aec <HAL_TIM_Base_Init+0x1c8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d018      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_TIM_Base_Init+0x1cc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a52      	ldr	r2, [pc, #328]	; (8002af4 <HAL_TIM_Base_Init+0x1d0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a51      	ldr	r2, [pc, #324]	; (8002af8 <HAL_TIM_Base_Init+0x1d4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	; (8002afc <HAL_TIM_Base_Init+0x1d8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_Base_Init+0xa8>
 80029c2:	f240 1113 	movw	r1, #275	; 0x113
 80029c6:	484e      	ldr	r0, [pc, #312]	; (8002b00 <HAL_TIM_Base_Init+0x1dc>)
 80029c8:	f7fe f83f 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d014      	beq.n	80029fe <HAL_TIM_Base_Init+0xda>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d010      	beq.n	80029fe <HAL_TIM_Base_Init+0xda>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d00c      	beq.n	80029fe <HAL_TIM_Base_Init+0xda>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d008      	beq.n	80029fe <HAL_TIM_Base_Init+0xda>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b60      	cmp	r3, #96	; 0x60
 80029f2:	d004      	beq.n	80029fe <HAL_TIM_Base_Init+0xda>
 80029f4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80029f8:	4841      	ldr	r0, [pc, #260]	; (8002b00 <HAL_TIM_Base_Init+0x1dc>)
 80029fa:	f7fe f826 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <HAL_TIM_Base_Init+0x100>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0e:	d009      	beq.n	8002a24 <HAL_TIM_Base_Init+0x100>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_Base_Init+0x100>
 8002a1a:	f240 1115 	movw	r1, #277	; 0x115
 8002a1e:	4838      	ldr	r0, [pc, #224]	; (8002b00 <HAL_TIM_Base_Init+0x1dc>)
 8002a20:	f7fe f813 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_TIM_Base_Init+0x11a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d004      	beq.n	8002a3e <HAL_TIM_Base_Init+0x11a>
 8002a34:	f44f 718b 	mov.w	r1, #278	; 0x116
 8002a38:	4831      	ldr	r0, [pc, #196]	; (8002b00 <HAL_TIM_Base_Init+0x1dc>)
 8002a3a:	f7fe f806 	bl	8000a4a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe f8e6 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f001 f9fa 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40000800 	.word	0x40000800
 8002ad8:	40000c00 	.word	0x40000c00
 8002adc:	40001000 	.word	0x40001000
 8002ae0:	40001400 	.word	0x40001400
 8002ae4:	40010400 	.word	0x40010400
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40014400 	.word	0x40014400
 8002af0:	40014800 	.word	0x40014800
 8002af4:	40001800 	.word	0x40001800
 8002af8:	40001c00 	.word	0x40001c00
 8002afc:	40002000 	.word	0x40002000
 8002b00:	080050bc 	.word	0x080050bc

08002b04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4d      	ldr	r2, [pc, #308]	; (8002c48 <HAL_TIM_Base_Start+0x144>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d045      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d040      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a49      	ldr	r2, [pc, #292]	; (8002c4c <HAL_TIM_Base_Start+0x148>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d03b      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a48      	ldr	r2, [pc, #288]	; (8002c50 <HAL_TIM_Base_Start+0x14c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d036      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a46      	ldr	r2, [pc, #280]	; (8002c54 <HAL_TIM_Base_Start+0x150>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d031      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a45      	ldr	r2, [pc, #276]	; (8002c58 <HAL_TIM_Base_Start+0x154>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d02c      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a43      	ldr	r2, [pc, #268]	; (8002c5c <HAL_TIM_Base_Start+0x158>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d027      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_TIM_Base_Start+0x15c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d022      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <HAL_TIM_Base_Start+0x160>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01d      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <HAL_TIM_Base_Start+0x164>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d018      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <HAL_TIM_Base_Start+0x168>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <HAL_TIM_Base_Start+0x16c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <HAL_TIM_Base_Start+0x170>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a39      	ldr	r2, [pc, #228]	; (8002c78 <HAL_TIM_Base_Start+0x174>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIM_Base_Start+0x9e>
 8002b98:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002b9c:	4837      	ldr	r0, [pc, #220]	; (8002c7c <HAL_TIM_Base_Start+0x178>)
 8002b9e:	f7fd ff54 	bl	8000a4a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_TIM_Base_Start+0xae>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e046      	b.n	8002c40 <HAL_TIM_Base_Start+0x13c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_TIM_Base_Start+0x144>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d022      	beq.n	8002c0a <HAL_TIM_Base_Start+0x106>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bcc:	d01d      	beq.n	8002c0a <HAL_TIM_Base_Start+0x106>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <HAL_TIM_Base_Start+0x148>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d018      	beq.n	8002c0a <HAL_TIM_Base_Start+0x106>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_TIM_Base_Start+0x14c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_TIM_Base_Start+0x106>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_TIM_Base_Start+0x150>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00e      	beq.n	8002c0a <HAL_TIM_Base_Start+0x106>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <HAL_TIM_Base_Start+0x15c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d009      	beq.n	8002c0a <HAL_TIM_Base_Start+0x106>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_TIM_Base_Start+0x160>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_TIM_Base_Start+0x106>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <HAL_TIM_Base_Start+0x16c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d111      	bne.n	8002c2e <HAL_TIM_Base_Start+0x12a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b06      	cmp	r3, #6
 8002c1a:	d010      	beq.n	8002c3e <HAL_TIM_Base_Start+0x13a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	e007      	b.n	8002c3e <HAL_TIM_Base_Start+0x13a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	40001000 	.word	0x40001000
 8002c5c:	40001400 	.word	0x40001400
 8002c60:	40010400 	.word	0x40010400
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800
 8002c70:	40001800 	.word	0x40001800
 8002c74:	40001c00 	.word	0x40001c00
 8002c78:	40002000 	.word	0x40002000
 8002c7c:	080050bc 	.word	0x080050bc

08002c80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0c5      	b.n	8002e1e <HAL_TIM_OC_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a64      	ldr	r2, [pc, #400]	; (8002e28 <HAL_TIM_OC_Init+0x1a8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d045      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d040      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a60      	ldr	r2, [pc, #384]	; (8002e2c <HAL_TIM_OC_Init+0x1ac>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d03b      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5e      	ldr	r2, [pc, #376]	; (8002e30 <HAL_TIM_OC_Init+0x1b0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d036      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5d      	ldr	r2, [pc, #372]	; (8002e34 <HAL_TIM_OC_Init+0x1b4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d031      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5b      	ldr	r2, [pc, #364]	; (8002e38 <HAL_TIM_OC_Init+0x1b8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d02c      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5a      	ldr	r2, [pc, #360]	; (8002e3c <HAL_TIM_OC_Init+0x1bc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d027      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <HAL_TIM_OC_Init+0x1c0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d022      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <HAL_TIM_OC_Init+0x1c4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d01d      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a55      	ldr	r2, [pc, #340]	; (8002e48 <HAL_TIM_OC_Init+0x1c8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d018      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a54      	ldr	r2, [pc, #336]	; (8002e4c <HAL_TIM_OC_Init+0x1cc>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a52      	ldr	r2, [pc, #328]	; (8002e50 <HAL_TIM_OC_Init+0x1d0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a51      	ldr	r2, [pc, #324]	; (8002e54 <HAL_TIM_OC_Init+0x1d4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a4f      	ldr	r2, [pc, #316]	; (8002e58 <HAL_TIM_OC_Init+0x1d8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_OC_Init+0xa8>
 8002d1e:	f240 2192 	movw	r1, #658	; 0x292
 8002d22:	484e      	ldr	r0, [pc, #312]	; (8002e5c <HAL_TIM_OC_Init+0x1dc>)
 8002d24:	f7fd fe91 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d014      	beq.n	8002d5a <HAL_TIM_OC_Init+0xda>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d010      	beq.n	8002d5a <HAL_TIM_OC_Init+0xda>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d00c      	beq.n	8002d5a <HAL_TIM_OC_Init+0xda>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d008      	beq.n	8002d5a <HAL_TIM_OC_Init+0xda>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b60      	cmp	r3, #96	; 0x60
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIM_OC_Init+0xda>
 8002d50:	f240 2193 	movw	r1, #659	; 0x293
 8002d54:	4841      	ldr	r0, [pc, #260]	; (8002e5c <HAL_TIM_OC_Init+0x1dc>)
 8002d56:	f7fd fe78 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00e      	beq.n	8002d80 <HAL_TIM_OC_Init+0x100>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIM_OC_Init+0x100>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d004      	beq.n	8002d80 <HAL_TIM_OC_Init+0x100>
 8002d76:	f44f 7125 	mov.w	r1, #660	; 0x294
 8002d7a:	4838      	ldr	r0, [pc, #224]	; (8002e5c <HAL_TIM_OC_Init+0x1dc>)
 8002d7c:	f7fd fe65 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_TIM_OC_Init+0x11a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIM_OC_Init+0x11a>
 8002d90:	f240 2195 	movw	r1, #661	; 0x295
 8002d94:	4831      	ldr	r0, [pc, #196]	; (8002e5c <HAL_TIM_OC_Init+0x1dc>)
 8002d96:	f7fd fe58 	bl	8000a4a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_OC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f856 	bl	8002e60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f001 f84c 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000800 	.word	0x40000800
 8002e34:	40000c00 	.word	0x40000c00
 8002e38:	40001000 	.word	0x40001000
 8002e3c:	40001400 	.word	0x40001400
 8002e40:	40010400 	.word	0x40010400
 8002e44:	40014000 	.word	0x40014000
 8002e48:	40014400 	.word	0x40014400
 8002e4c:	40014800 	.word	0x40014800
 8002e50:	40001800 	.word	0x40001800
 8002e54:	40001c00 	.word	0x40001c00
 8002e58:	40002000 	.word	0x40002000
 8002e5c:	080050bc 	.word	0x080050bc

08002e60 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a90      	ldr	r2, [pc, #576]	; (80030c8 <HAL_TIM_OC_Start_IT+0x254>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10f      	bne.n	8002eac <HAL_TIM_OC_Start_IT+0x38>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 809f 	beq.w	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	f000 809b 	beq.w	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	f000 8097 	beq.w	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	f000 8093 	beq.w	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_TIM_OC_Start_IT+0x60>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 808a 	beq.w	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	f000 8086 	beq.w	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	f000 8082 	beq.w	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b0c      	cmp	r3, #12
 8002ed2:	d07e      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7c      	ldr	r2, [pc, #496]	; (80030cc <HAL_TIM_OC_Start_IT+0x258>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10b      	bne.n	8002ef6 <HAL_TIM_OC_Start_IT+0x82>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d076      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d073      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d070      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d06d      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a75      	ldr	r2, [pc, #468]	; (80030d0 <HAL_TIM_OC_Start_IT+0x25c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d10b      	bne.n	8002f18 <HAL_TIM_OC_Start_IT+0xa4>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d065      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d062      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d05f      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d05c      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6d      	ldr	r2, [pc, #436]	; (80030d4 <HAL_TIM_OC_Start_IT+0x260>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10b      	bne.n	8002f3a <HAL_TIM_OC_Start_IT+0xc6>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d054      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d051      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d04e      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d04b      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a66      	ldr	r2, [pc, #408]	; (80030d8 <HAL_TIM_OC_Start_IT+0x264>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10b      	bne.n	8002f5c <HAL_TIM_OC_Start_IT+0xe8>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d043      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d040      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d03d      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	d03a      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5e      	ldr	r2, [pc, #376]	; (80030dc <HAL_TIM_OC_Start_IT+0x268>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d105      	bne.n	8002f72 <HAL_TIM_OC_Start_IT+0xfe>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d032      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d02f      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a5a      	ldr	r2, [pc, #360]	; (80030e0 <HAL_TIM_OC_Start_IT+0x26c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <HAL_TIM_OC_Start_IT+0x10e>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d027      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_TIM_OC_Start_IT+0x270>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d102      	bne.n	8002f92 <HAL_TIM_OC_Start_IT+0x11e>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01f      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a54      	ldr	r2, [pc, #336]	; (80030e8 <HAL_TIM_OC_Start_IT+0x274>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d105      	bne.n	8002fa8 <HAL_TIM_OC_Start_IT+0x134>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d014      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a4f      	ldr	r2, [pc, #316]	; (80030ec <HAL_TIM_OC_Start_IT+0x278>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d102      	bne.n	8002fb8 <HAL_TIM_OC_Start_IT+0x144>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00c      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a4c      	ldr	r2, [pc, #304]	; (80030f0 <HAL_TIM_OC_Start_IT+0x27c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d102      	bne.n	8002fc8 <HAL_TIM_OC_Start_IT+0x154>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIM_OC_Start_IT+0x15e>
 8002fc8:	f240 3172 	movw	r1, #882	; 0x372
 8002fcc:	4849      	ldr	r0, [pc, #292]	; (80030f4 <HAL_TIM_OC_Start_IT+0x280>)
 8002fce:	f7fd fd3c 	bl	8000a4a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_TIM_OC_Start_IT+0x178>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e022      	b.n	8003032 <HAL_TIM_OC_Start_IT+0x1be>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d109      	bne.n	8003006 <HAL_TIM_OC_Start_IT+0x192>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	e015      	b.n	8003032 <HAL_TIM_OC_Start_IT+0x1be>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d109      	bne.n	8003020 <HAL_TIM_OC_Start_IT+0x1ac>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	e008      	b.n	8003032 <HAL_TIM_OC_Start_IT+0x1be>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_TIM_OC_Start_IT+0x1c6>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e0e0      	b.n	80031fc <HAL_TIM_OC_Start_IT+0x388>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <HAL_TIM_OC_Start_IT+0x1d6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003048:	e013      	b.n	8003072 <HAL_TIM_OC_Start_IT+0x1fe>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d104      	bne.n	800305a <HAL_TIM_OC_Start_IT+0x1e6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003058:	e00b      	b.n	8003072 <HAL_TIM_OC_Start_IT+0x1fe>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d104      	bne.n	800306a <HAL_TIM_OC_Start_IT+0x1f6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003068:	e003      	b.n	8003072 <HAL_TIM_OC_Start_IT+0x1fe>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d85a      	bhi.n	800312e <HAL_TIM_OC_Start_IT+0x2ba>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_TIM_OC_Start_IT+0x20c>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5
 8003084:	0800312f 	.word	0x0800312f
 8003088:	0800312f 	.word	0x0800312f
 800308c:	0800312f 	.word	0x0800312f
 8003090:	080030f9 	.word	0x080030f9
 8003094:	0800312f 	.word	0x0800312f
 8003098:	0800312f 	.word	0x0800312f
 800309c:	0800312f 	.word	0x0800312f
 80030a0:	0800310b 	.word	0x0800310b
 80030a4:	0800312f 	.word	0x0800312f
 80030a8:	0800312f 	.word	0x0800312f
 80030ac:	0800312f 	.word	0x0800312f
 80030b0:	0800311d 	.word	0x0800311d
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0202 	orr.w	r2, r2, #2
 80030c2:	60da      	str	r2, [r3, #12]
      break;
 80030c4:	e036      	b.n	8003134 <HAL_TIM_OC_Start_IT+0x2c0>
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40010400 	.word	0x40010400
 80030dc:	40014000 	.word	0x40014000
 80030e0:	40014400 	.word	0x40014400
 80030e4:	40014800 	.word	0x40014800
 80030e8:	40001800 	.word	0x40001800
 80030ec:	40001c00 	.word	0x40001c00
 80030f0:	40002000 	.word	0x40002000
 80030f4:	080050bc 	.word	0x080050bc
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0204 	orr.w	r2, r2, #4
 8003106:	60da      	str	r2, [r3, #12]
      break;
 8003108:	e014      	b.n	8003134 <HAL_TIM_OC_Start_IT+0x2c0>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0208 	orr.w	r2, r2, #8
 8003118:	60da      	str	r2, [r3, #12]
      break;
 800311a:	e00b      	b.n	8003134 <HAL_TIM_OC_Start_IT+0x2c0>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0210 	orr.w	r2, r2, #16
 800312a:	60da      	str	r2, [r3, #12]
      break;
 800312c:	e002      	b.n	8003134 <HAL_TIM_OC_Start_IT+0x2c0>
    }

    default:
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
      break;
 8003132:	bf00      	nop
  }

  if (status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d15f      	bne.n	80031fa <HAL_TIM_OC_Start_IT+0x386>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	6839      	ldr	r1, [r7, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f001 fa02 	bl	800454c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <HAL_TIM_OC_Start_IT+0x390>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_TIM_OC_Start_IT+0x2e8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <HAL_TIM_OC_Start_IT+0x394>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_TIM_OC_Start_IT+0x2ec>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_TIM_OC_Start_IT+0x2ee>
 8003160:	2300      	movs	r3, #0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_TIM_OC_Start_IT+0x302>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <HAL_TIM_OC_Start_IT+0x390>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <HAL_TIM_OC_Start_IT+0x352>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d01d      	beq.n	80031c6 <HAL_TIM_OC_Start_IT+0x352>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <HAL_TIM_OC_Start_IT+0x398>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d018      	beq.n	80031c6 <HAL_TIM_OC_Start_IT+0x352>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <HAL_TIM_OC_Start_IT+0x39c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d013      	beq.n	80031c6 <HAL_TIM_OC_Start_IT+0x352>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_TIM_OC_Start_IT+0x3a0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_TIM_OC_Start_IT+0x352>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a16      	ldr	r2, [pc, #88]	; (8003208 <HAL_TIM_OC_Start_IT+0x394>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_TIM_OC_Start_IT+0x352>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <HAL_TIM_OC_Start_IT+0x3a4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_TIM_OC_Start_IT+0x352>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_TIM_OC_Start_IT+0x3a8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d111      	bne.n	80031ea <HAL_TIM_OC_Start_IT+0x376>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d010      	beq.n	80031fa <HAL_TIM_OC_Start_IT+0x386>
      {
        __HAL_TIM_ENABLE(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e8:	e007      	b.n	80031fa <HAL_TIM_OC_Start_IT+0x386>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40010000 	.word	0x40010000
 8003208:	40010400 	.word	0x40010400
 800320c:	40000400 	.word	0x40000400
 8003210:	40000800 	.word	0x40000800
 8003214:	40000c00 	.word	0x40000c00
 8003218:	40014000 	.word	0x40014000
 800321c:	40001800 	.word	0x40001800

08003220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0202 	mvn.w	r2, #2
 800324c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fde0 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fb2c 	bl	80008c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fde3 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b04      	cmp	r3, #4
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0204 	mvn.w	r2, #4
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fdb6 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fb02 	bl	80008c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fdb9 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d122      	bne.n	8003324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d11b      	bne.n	8003324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0208 	mvn.w	r2, #8
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2204      	movs	r2, #4
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fd8c 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fad8 	bl	80008c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fd8f 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d122      	bne.n	8003378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d11b      	bne.n	8003378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0210 	mvn.w	r2, #16
 8003348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2208      	movs	r2, #8
 800334e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fd62 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003364:	e005      	b.n	8003372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd faae 	bl	80008c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fd65 	bl	8003e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0201 	mvn.w	r2, #1
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fd38 	bl	8003e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b80      	cmp	r3, #128	; 0x80
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d107      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f001 fa2a 	bl	8004824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d10e      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d107      	bne.n	80033fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fd2a 	bl	8003e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b20      	cmp	r3, #32
 8003408:	d10e      	bne.n	8003428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b20      	cmp	r3, #32
 8003416:	d107      	bne.n	8003428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0220 	mvn.w	r2, #32
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f001 f9f4 	bl	8004810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d010      	beq.n	8003468 <HAL_TIM_OC_ConfigChannel+0x38>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d00d      	beq.n	8003468 <HAL_TIM_OC_ConfigChannel+0x38>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b08      	cmp	r3, #8
 8003450:	d00a      	beq.n	8003468 <HAL_TIM_OC_ConfigChannel+0x38>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d007      	beq.n	8003468 <HAL_TIM_OC_ConfigChannel+0x38>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b3c      	cmp	r3, #60	; 0x3c
 800345c:	d004      	beq.n	8003468 <HAL_TIM_OC_ConfigChannel+0x38>
 800345e:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8003462:	487f      	ldr	r0, [pc, #508]	; (8003660 <HAL_TIM_OC_ConfigChannel+0x230>)
 8003464:	f7fd faf1 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d018      	beq.n	80034a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b10      	cmp	r3, #16
 8003476:	d014      	beq.n	80034a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b20      	cmp	r3, #32
 800347e:	d010      	beq.n	80034a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b30      	cmp	r3, #48	; 0x30
 8003486:	d00c      	beq.n	80034a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d008      	beq.n	80034a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d004      	beq.n	80034a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003498:	f640 71c6 	movw	r1, #4038	; 0xfc6
 800349c:	4870      	ldr	r0, [pc, #448]	; (8003660 <HAL_TIM_OC_ConfigChannel+0x230>)
 800349e:	f7fd fad4 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_TIM_OC_ConfigChannel+0x8c>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d004      	beq.n	80034bc <HAL_TIM_OC_ConfigChannel+0x8c>
 80034b2:	f640 71c7 	movw	r1, #4039	; 0xfc7
 80034b6:	486a      	ldr	r0, [pc, #424]	; (8003660 <HAL_TIM_OC_ConfigChannel+0x230>)
 80034b8:	f7fd fac7 	bl	8000a4a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_OC_ConfigChannel+0x9a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e114      	b.n	80036f4 <HAL_TIM_OC_ConfigChannel+0x2c4>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	f200 8105 	bhi.w	80036e4 <HAL_TIM_OC_ConfigChannel+0x2b4>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_TIM_OC_ConfigChannel+0xb0>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	08003515 	.word	0x08003515
 80034e4:	080036e5 	.word	0x080036e5
 80034e8:	080036e5 	.word	0x080036e5
 80034ec:	080036e5 	.word	0x080036e5
 80034f0:	080035a5 	.word	0x080035a5
 80034f4:	080036e5 	.word	0x080036e5
 80034f8:	080036e5 	.word	0x080036e5
 80034fc:	080036e5 	.word	0x080036e5
 8003500:	0800360d 	.word	0x0800360d
 8003504:	080036e5 	.word	0x080036e5
 8003508:	080036e5 	.word	0x080036e5
 800350c:	080036e5 	.word	0x080036e5
 8003510:	08003691 	.word	0x08003691
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_TIM_OC_ConfigChannel+0x234>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d03b      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d036      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a4e      	ldr	r2, [pc, #312]	; (8003668 <HAL_TIM_OC_ConfigChannel+0x238>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d031      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a4d      	ldr	r2, [pc, #308]	; (800366c <HAL_TIM_OC_ConfigChannel+0x23c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d02c      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a4b      	ldr	r2, [pc, #300]	; (8003670 <HAL_TIM_OC_ConfigChannel+0x240>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d027      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <HAL_TIM_OC_ConfigChannel+0x244>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d022      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a48      	ldr	r2, [pc, #288]	; (8003678 <HAL_TIM_OC_ConfigChannel+0x248>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01d      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a47      	ldr	r2, [pc, #284]	; (800367c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d018      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a45      	ldr	r2, [pc, #276]	; (8003680 <HAL_TIM_OC_ConfigChannel+0x250>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a44      	ldr	r2, [pc, #272]	; (8003684 <HAL_TIM_OC_ConfigChannel+0x254>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a42      	ldr	r2, [pc, #264]	; (8003688 <HAL_TIM_OC_ConfigChannel+0x258>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a41      	ldr	r2, [pc, #260]	; (800368c <HAL_TIM_OC_ConfigChannel+0x25c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIM_OC_ConfigChannel+0x166>
 800358c:	f640 71d1 	movw	r1, #4049	; 0xfd1
 8003590:	4833      	ldr	r0, [pc, #204]	; (8003660 <HAL_TIM_OC_ConfigChannel+0x230>)
 8003592:	f7fd fa5a 	bl	8000a4a <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fd01 	bl	8003fa4 <TIM_OC1_SetConfig>
      break;
 80035a2:	e0a2      	b.n	80036ea <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <HAL_TIM_OC_ConfigChannel+0x234>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d027      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d022      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2a      	ldr	r2, [pc, #168]	; (8003668 <HAL_TIM_OC_ConfigChannel+0x238>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01d      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a29      	ldr	r2, [pc, #164]	; (800366c <HAL_TIM_OC_ConfigChannel+0x23c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d018      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a27      	ldr	r2, [pc, #156]	; (8003670 <HAL_TIM_OC_ConfigChannel+0x240>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a26      	ldr	r2, [pc, #152]	; (8003674 <HAL_TIM_OC_ConfigChannel+0x244>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a24      	ldr	r2, [pc, #144]	; (8003678 <HAL_TIM_OC_ConfigChannel+0x248>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a25      	ldr	r2, [pc, #148]	; (8003684 <HAL_TIM_OC_ConfigChannel+0x254>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80035f4:	f640 71db 	movw	r1, #4059	; 0xfdb
 80035f8:	4819      	ldr	r0, [pc, #100]	; (8003660 <HAL_TIM_OC_ConfigChannel+0x230>)
 80035fa:	f7fd fa26 	bl	8000a4a <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fd67 	bl	80040d8 <TIM_OC2_SetConfig>
      break;
 800360a:	e06e      	b.n	80036ea <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_TIM_OC_ConfigChannel+0x234>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01d      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x222>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d018      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x222>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a10      	ldr	r2, [pc, #64]	; (8003668 <HAL_TIM_OC_ConfigChannel+0x238>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x222>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a0f      	ldr	r2, [pc, #60]	; (800366c <HAL_TIM_OC_ConfigChannel+0x23c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x222>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_TIM_OC_ConfigChannel+0x240>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x222>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_TIM_OC_ConfigChannel+0x244>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x222>
 8003648:	f640 71e5 	movw	r1, #4069	; 0xfe5
 800364c:	4804      	ldr	r0, [pc, #16]	; (8003660 <HAL_TIM_OC_ConfigChannel+0x230>)
 800364e:	f7fd f9fc 	bl	8000a4a <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fddb 	bl	8004214 <TIM_OC3_SetConfig>
      break;
 800365e:	e044      	b.n	80036ea <HAL_TIM_OC_ConfigChannel+0x2ba>
 8003660:	080050bc 	.word	0x080050bc
 8003664:	40010000 	.word	0x40010000
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40000c00 	.word	0x40000c00
 8003674:	40010400 	.word	0x40010400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800
 8003684:	40001800 	.word	0x40001800
 8003688:	40001c00 	.word	0x40001c00
 800368c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <HAL_TIM_OC_ConfigChannel+0x2cc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01d      	beq.n	80036d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d018      	beq.n	80036d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_TIM_OC_ConfigChannel+0x2d4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_TIM_OC_ConfigChannel+0x2d8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80036cc:	f640 71ef 	movw	r1, #4079	; 0xfef
 80036d0:	480f      	ldr	r0, [pc, #60]	; (8003710 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 80036d2:	f7fd f9ba 	bl	8000a4a <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 fe37 	bl	8004350 <TIM_OC4_SetConfig>
      break;
 80036e2:	e002      	b.n	80036ea <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    default:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	75fb      	strb	r3, [r7, #23]
      break;
 80036e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40010400 	.word	0x40010400
 8003710:	080050bc 	.word	0x080050bc

08003714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIM_ConfigClockSource+0x1c>
 800372c:	2302      	movs	r3, #2
 800372e:	e35c      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x6d6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d029      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b70      	cmp	r3, #112	; 0x70
 8003750:	d025      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d020      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d01c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b50      	cmp	r3, #80	; 0x50
 800376a:	d018      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d014      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b10      	cmp	r3, #16
 8003782:	d00c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b20      	cmp	r3, #32
 800378a:	d008      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d004      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x8a>
 8003794:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8003798:	4893      	ldr	r0, [pc, #588]	; (80039e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800379a:	f7fd f956 	bl	8000a4a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c6:	f000 812b 	beq.w	8003a20 <HAL_TIM_ConfigClockSource+0x30c>
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	f200 82ff 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	d02e      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x122>
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037dc:	f200 82f8 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	f000 8082 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1d6>
 80037e6:	2b70      	cmp	r3, #112	; 0x70
 80037e8:	f200 82f2 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 80037ec:	2b60      	cmp	r3, #96	; 0x60
 80037ee:	f000 81f9 	beq.w	8003be4 <HAL_TIM_ConfigClockSource+0x4d0>
 80037f2:	2b60      	cmp	r3, #96	; 0x60
 80037f4:	f200 82ec 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 80037f8:	2b50      	cmp	r3, #80	; 0x50
 80037fa:	f000 8182 	beq.w	8003b02 <HAL_TIM_ConfigClockSource+0x3ee>
 80037fe:	2b50      	cmp	r3, #80	; 0x50
 8003800:	f200 82e6 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	f000 824d 	beq.w	8003ca4 <HAL_TIM_ConfigClockSource+0x590>
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	f200 82e0 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	f000 82a7 	beq.w	8003d64 <HAL_TIM_ConfigClockSource+0x650>
 8003816:	2b30      	cmp	r3, #48	; 0x30
 8003818:	f200 82da 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 800381c:	2b20      	cmp	r3, #32
 800381e:	f000 82a1 	beq.w	8003d64 <HAL_TIM_ConfigClockSource+0x650>
 8003822:	2b20      	cmp	r3, #32
 8003824:	f200 82d4 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 829b 	beq.w	8003d64 <HAL_TIM_ConfigClockSource+0x650>
 800382e:	2b10      	cmp	r3, #16
 8003830:	f000 8298 	beq.w	8003d64 <HAL_TIM_ConfigClockSource+0x650>
 8003834:	e2cc      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6c      	ldr	r2, [pc, #432]	; (80039ec <HAL_TIM_ConfigClockSource+0x2d8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	f000 82ca 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384a:	f000 82c4 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	f000 82be 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	f000 82b8 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	f000 82b2 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a61      	ldr	r2, [pc, #388]	; (80039fc <HAL_TIM_ConfigClockSource+0x2e8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	f000 82ac 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5f      	ldr	r2, [pc, #380]	; (8003a00 <HAL_TIM_ConfigClockSource+0x2ec>)
 8003884:	4293      	cmp	r3, r2
 8003886:	f000 82a6 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a5d      	ldr	r2, [pc, #372]	; (8003a04 <HAL_TIM_ConfigClockSource+0x2f0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	f000 82a0 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5b      	ldr	r2, [pc, #364]	; (8003a08 <HAL_TIM_ConfigClockSource+0x2f4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	f000 829a 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <HAL_TIM_ConfigClockSource+0x2f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	f000 8294 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_TIM_ConfigClockSource+0x2fc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	f000 828e 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_TIM_ConfigClockSource+0x300>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	f000 8288 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a53      	ldr	r2, [pc, #332]	; (8003a18 <HAL_TIM_ConfigClockSource+0x304>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	f000 8282 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a51      	ldr	r2, [pc, #324]	; (8003a1c <HAL_TIM_ConfigClockSource+0x308>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	f000 827c 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
 80038de:	f241 41c3 	movw	r1, #5315	; 0x14c3
 80038e2:	4841      	ldr	r0, [pc, #260]	; (80039e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80038e4:	f7fd f8b1 	bl	8000a4a <assert_failed>
      break;
 80038e8:	e275      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a3f      	ldr	r2, [pc, #252]	; (80039ec <HAL_TIM_ConfigClockSource+0x2d8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d027      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d022      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3b      	ldr	r2, [pc, #236]	; (80039f0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d01d      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d018      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d013      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a38      	ldr	r2, [pc, #224]	; (8003a04 <HAL_TIM_ConfigClockSource+0x2f0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00e      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a37      	ldr	r2, [pc, #220]	; (8003a08 <HAL_TIM_ConfigClockSource+0x2f4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a37      	ldr	r2, [pc, #220]	; (8003a14 <HAL_TIM_ConfigClockSource+0x300>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x230>
 800393a:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800393e:	482a      	ldr	r0, [pc, #168]	; (80039e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8003940:	f7fd f883 	bl	8000a4a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0x260>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d00e      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0x260>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395e:	d009      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0x260>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003968:	d004      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0x260>
 800396a:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800396e:	481e      	ldr	r0, [pc, #120]	; (80039e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8003970:	f7fd f86b 	bl	8000a4a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	d014      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x294>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d010      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x294>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x294>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d008      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x294>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b0a      	cmp	r3, #10
 800399c:	d004      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0x294>
 800399e:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80039a2:	4811      	ldr	r0, [pc, #68]	; (80039e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80039a4:	f7fd f851 	bl	8000a4a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b0f      	cmp	r3, #15
 80039ae:	d904      	bls.n	80039ba <HAL_TIM_ConfigClockSource+0x2a6>
 80039b0:	f241 41cf 	movw	r1, #5327	; 0x14cf
 80039b4:	480c      	ldr	r0, [pc, #48]	; (80039e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80039b6:	f7fd f848 	bl	8000a4a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6899      	ldr	r1, [r3, #8]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f000 fd9f 	bl	800450c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	609a      	str	r2, [r3, #8]
      break;
 80039e6:	e1f7      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x6c4>
 80039e8:	080050bc 	.word	0x080050bc
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40001000 	.word	0x40001000
 8003a00:	40001400 	.word	0x40001400
 8003a04:	40010400 	.word	0x40010400
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800
 8003a14:	40001800 	.word	0x40001800
 8003a18:	40001c00 	.word	0x40001c00
 8003a1c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x352>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d018      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x352>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a63      	ldr	r2, [pc, #396]	; (8003bc8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x352>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a62      	ldr	r2, [pc, #392]	; (8003bcc <HAL_TIM_ConfigClockSource+0x4b8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x352>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a60      	ldr	r2, [pc, #384]	; (8003bd0 <HAL_TIM_ConfigClockSource+0x4bc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x352>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5f      	ldr	r2, [pc, #380]	; (8003bd4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x352>
 8003a5c:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8003a60:	485d      	ldr	r0, [pc, #372]	; (8003bd8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8003a62:	f7fc fff2 	bl	8000a4a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d013      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x382>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a76:	d00e      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x382>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a80:	d009      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x382>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a8a:	d004      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x382>
 8003a8c:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8003a90:	4851      	ldr	r0, [pc, #324]	; (8003bd8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8003a92:	f7fc ffda 	bl	8000a4a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9e:	d014      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x3b6>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x3b6>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00c      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x3b6>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d008      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x3b6>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b0a      	cmp	r3, #10
 8003abe:	d004      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x3b6>
 8003ac0:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8003ac4:	4844      	ldr	r0, [pc, #272]	; (8003bd8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8003ac6:	f7fc ffc0 	bl	8000a4a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b0f      	cmp	r3, #15
 8003ad0:	d904      	bls.n	8003adc <HAL_TIM_ConfigClockSource+0x3c8>
 8003ad2:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8003ad6:	4840      	ldr	r0, [pc, #256]	; (8003bd8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8003ad8:	f7fc ffb7 	bl	8000a4a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f000 fd0e 	bl	800450c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003afe:	609a      	str	r2, [r3, #8]
      break;
 8003b00:	e16a      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b14:	d022      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2b      	ldr	r2, [pc, #172]	; (8003bc8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <HAL_TIM_ConfigClockSource+0x4b8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a28      	ldr	r2, [pc, #160]	; (8003bd0 <HAL_TIM_ConfigClockSource+0x4bc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <HAL_TIM_ConfigClockSource+0x4c8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a24      	ldr	r2, [pc, #144]	; (8003be0 <HAL_TIM_ConfigClockSource+0x4cc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_TIM_ConfigClockSource+0x448>
 8003b52:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8003b56:	4820      	ldr	r0, [pc, #128]	; (8003bd8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8003b58:	f7fc ff77 	bl	8000a4a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b64:	d014      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x47c>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x47c>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00c      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x47c>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d008      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x47c>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b0a      	cmp	r3, #10
 8003b84:	d004      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0x47c>
 8003b86:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8003b8a:	4813      	ldr	r0, [pc, #76]	; (8003bd8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8003b8c:	f7fc ff5d 	bl	8000a4a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d904      	bls.n	8003ba2 <HAL_TIM_ConfigClockSource+0x48e>
 8003b98:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8003b9c:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8003b9e:	f7fc ff54 	bl	8000a4a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fc32 	bl	8004418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2150      	movs	r1, #80	; 0x50
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fc8b 	bl	80044d6 <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e10a      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x6c4>
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40010400 	.word	0x40010400
 8003bd8:	080050bc 	.word	0x080050bc
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a82      	ldr	r2, [pc, #520]	; (8003df4 <HAL_TIM_ConfigClockSource+0x6e0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d027      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf6:	d022      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_TIM_ConfigClockSource+0x6e4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01d      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a7d      	ldr	r2, [pc, #500]	; (8003dfc <HAL_TIM_ConfigClockSource+0x6e8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7b      	ldr	r2, [pc, #492]	; (8003e00 <HAL_TIM_ConfigClockSource+0x6ec>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7a      	ldr	r2, [pc, #488]	; (8003e04 <HAL_TIM_ConfigClockSource+0x6f0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a78      	ldr	r2, [pc, #480]	; (8003e08 <HAL_TIM_ConfigClockSource+0x6f4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a77      	ldr	r2, [pc, #476]	; (8003e0c <HAL_TIM_ConfigClockSource+0x6f8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x52a>
 8003c34:	f241 5106 	movw	r1, #5382	; 0x1506
 8003c38:	4875      	ldr	r0, [pc, #468]	; (8003e10 <HAL_TIM_ConfigClockSource+0x6fc>)
 8003c3a:	f7fc ff06 	bl	8000a4a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c46:	d014      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x55e>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d010      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x55e>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00c      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x55e>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d008      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x55e>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b0a      	cmp	r3, #10
 8003c66:	d004      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x55e>
 8003c68:	f241 5109 	movw	r1, #5385	; 0x1509
 8003c6c:	4868      	ldr	r0, [pc, #416]	; (8003e10 <HAL_TIM_ConfigClockSource+0x6fc>)
 8003c6e:	f7fc feec 	bl	8000a4a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	d904      	bls.n	8003c84 <HAL_TIM_ConfigClockSource+0x570>
 8003c7a:	f241 510a 	movw	r1, #5386	; 0x150a
 8003c7e:	4864      	ldr	r0, [pc, #400]	; (8003e10 <HAL_TIM_ConfigClockSource+0x6fc>)
 8003c80:	f7fc fee3 	bl	8000a4a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	461a      	mov	r2, r3
 8003c92:	f000 fbf0 	bl	8004476 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2160      	movs	r1, #96	; 0x60
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fc1a 	bl	80044d6 <TIM_ITRx_SetConfig>
      break;
 8003ca2:	e099      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_TIM_ConfigClockSource+0x6e0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d027      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d022      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4e      	ldr	r2, [pc, #312]	; (8003df8 <HAL_TIM_ConfigClockSource+0x6e4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01d      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4d      	ldr	r2, [pc, #308]	; (8003dfc <HAL_TIM_ConfigClockSource+0x6e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a4b      	ldr	r2, [pc, #300]	; (8003e00 <HAL_TIM_ConfigClockSource+0x6ec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a4a      	ldr	r2, [pc, #296]	; (8003e04 <HAL_TIM_ConfigClockSource+0x6f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a48      	ldr	r2, [pc, #288]	; (8003e08 <HAL_TIM_ConfigClockSource+0x6f4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a47      	ldr	r2, [pc, #284]	; (8003e0c <HAL_TIM_ConfigClockSource+0x6f8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x5ea>
 8003cf4:	f241 5116 	movw	r1, #5398	; 0x1516
 8003cf8:	4845      	ldr	r0, [pc, #276]	; (8003e10 <HAL_TIM_ConfigClockSource+0x6fc>)
 8003cfa:	f7fc fea6 	bl	8000a4a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d06:	d014      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x61e>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x61e>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x61e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d008      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x61e>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b0a      	cmp	r3, #10
 8003d26:	d004      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x61e>
 8003d28:	f241 5119 	movw	r1, #5401	; 0x1519
 8003d2c:	4838      	ldr	r0, [pc, #224]	; (8003e10 <HAL_TIM_ConfigClockSource+0x6fc>)
 8003d2e:	f7fc fe8c 	bl	8000a4a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	d904      	bls.n	8003d44 <HAL_TIM_ConfigClockSource+0x630>
 8003d3a:	f241 511a 	movw	r1, #5402	; 0x151a
 8003d3e:	4834      	ldr	r0, [pc, #208]	; (8003e10 <HAL_TIM_ConfigClockSource+0x6fc>)
 8003d40:	f7fc fe83 	bl	8000a4a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	461a      	mov	r2, r3
 8003d52:	f000 fb61 	bl	8004418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2140      	movs	r1, #64	; 0x40
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fbba 	bl	80044d6 <TIM_ITRx_SetConfig>
      break;
 8003d62:	e039      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_TIM_ConfigClockSource+0x6e0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d027      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d022      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_TIM_ConfigClockSource+0x6e4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01d      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_TIM_ConfigClockSource+0x6e8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d018      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <HAL_TIM_ConfigClockSource+0x6ec>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d013      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_TIM_ConfigClockSource+0x6f0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00e      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <HAL_TIM_ConfigClockSource+0x6f4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d009      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <HAL_TIM_ConfigClockSource+0x6f8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d004      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x6aa>
 8003db4:	f241 5129 	movw	r1, #5417	; 0x1529
 8003db8:	4815      	ldr	r0, [pc, #84]	; (8003e10 <HAL_TIM_ConfigClockSource+0x6fc>)
 8003dba:	f7fc fe46 	bl	8000a4a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f000 fb84 	bl	80044d6 <TIM_ITRx_SetConfig>
      break;
 8003dce:	e003      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd4:	e000      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8003dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40001800 	.word	0x40001800
 8003e10:	080050bc 	.word	0x080050bc

08003e14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a40      	ldr	r2, [pc, #256]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3d      	ldr	r2, [pc, #244]	; (8003f7c <TIM_Base_SetConfig+0x118>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3c      	ldr	r2, [pc, #240]	; (8003f80 <TIM_Base_SetConfig+0x11c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <TIM_Base_SetConfig+0x120>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02b      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d027      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <TIM_Base_SetConfig+0x118>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d023      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <TIM_Base_SetConfig+0x11c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <TIM_Base_SetConfig+0x120>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01b      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d017      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <TIM_Base_SetConfig+0x128>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <TIM_Base_SetConfig+0x12c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00f      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <TIM_Base_SetConfig+0x130>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <TIM_Base_SetConfig+0x134>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <TIM_Base_SetConfig+0x138>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <TIM_Base_SetConfig+0x13c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_Base_SetConfig+0xf8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800
 8003f98:	40001800 	.word	0x40001800
 8003f9c:	40001c00 	.word	0x40001c00
 8003fa0:	40002000 	.word	0x40002000

08003fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f023 0201 	bic.w	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 0302 	bic.w	r3, r3, #2
 8003fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a34      	ldr	r2, [pc, #208]	; (80040cc <TIM_OC1_SetConfig+0x128>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_OC1_SetConfig+0x64>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a33      	ldr	r2, [pc, #204]	; (80040d0 <TIM_OC1_SetConfig+0x12c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d119      	bne.n	800403c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <TIM_OC1_SetConfig+0x7e>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d004      	beq.n	8004022 <TIM_OC1_SetConfig+0x7e>
 8004018:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 800401c:	482d      	ldr	r0, [pc, #180]	; (80040d4 <TIM_OC1_SetConfig+0x130>)
 800401e:	f7fc fd14 	bl	8000a4a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f023 0308 	bic.w	r3, r3, #8
 8004028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0304 	bic.w	r3, r3, #4
 800403a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a23      	ldr	r2, [pc, #140]	; (80040cc <TIM_OC1_SetConfig+0x128>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_OC1_SetConfig+0xa8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <TIM_OC1_SetConfig+0x12c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d12d      	bne.n	80040a8 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004054:	d008      	beq.n	8004068 <TIM_OC1_SetConfig+0xc4>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <TIM_OC1_SetConfig+0xc4>
 800405e:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8004062:	481c      	ldr	r0, [pc, #112]	; (80040d4 <TIM_OC1_SetConfig+0x130>)
 8004064:	f7fc fcf1 	bl	8000a4a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d008      	beq.n	8004084 <TIM_OC1_SetConfig+0xe0>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <TIM_OC1_SetConfig+0xe0>
 800407a:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 800407e:	4815      	ldr	r0, [pc, #84]	; (80040d4 <TIM_OC1_SetConfig+0x130>)
 8004080:	f7fc fce3 	bl	8000a4a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010400 	.word	0x40010400
 80040d4:	080050bc 	.word	0x080050bc

080040d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f023 0210 	bic.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0320 	bic.w	r3, r3, #32
 8004122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a35      	ldr	r2, [pc, #212]	; (8004208 <TIM_OC2_SetConfig+0x130>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC2_SetConfig+0x68>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a34      	ldr	r2, [pc, #208]	; (800420c <TIM_OC2_SetConfig+0x134>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d11a      	bne.n	8004176 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <TIM_OC2_SetConfig+0x82>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d004      	beq.n	800415a <TIM_OC2_SetConfig+0x82>
 8004150:	f641 3112 	movw	r1, #6930	; 0x1b12
 8004154:	482e      	ldr	r0, [pc, #184]	; (8004210 <TIM_OC2_SetConfig+0x138>)
 8004156:	f7fc fc78 	bl	8000a4a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004174:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a23      	ldr	r2, [pc, #140]	; (8004208 <TIM_OC2_SetConfig+0x130>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_OC2_SetConfig+0xae>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <TIM_OC2_SetConfig+0x134>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d12f      	bne.n	80041e6 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418e:	d008      	beq.n	80041a2 <TIM_OC2_SetConfig+0xca>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <TIM_OC2_SetConfig+0xca>
 8004198:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800419c:	481c      	ldr	r0, [pc, #112]	; (8004210 <TIM_OC2_SetConfig+0x138>)
 800419e:	f7fc fc54 	bl	8000a4a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d008      	beq.n	80041be <TIM_OC2_SetConfig+0xe6>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <TIM_OC2_SetConfig+0xe6>
 80041b4:	f641 3121 	movw	r1, #6945	; 0x1b21
 80041b8:	4815      	ldr	r0, [pc, #84]	; (8004210 <TIM_OC2_SetConfig+0x138>)
 80041ba:	f7fc fc46 	bl	8000a4a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40010000 	.word	0x40010000
 800420c:	40010400 	.word	0x40010400
 8004210:	080050bc 	.word	0x080050bc

08004214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800425c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a35      	ldr	r2, [pc, #212]	; (8004344 <TIM_OC3_SetConfig+0x130>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC3_SetConfig+0x66>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a34      	ldr	r2, [pc, #208]	; (8004348 <TIM_OC3_SetConfig+0x134>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d11a      	bne.n	80042b0 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <TIM_OC3_SetConfig+0x80>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b08      	cmp	r3, #8
 8004288:	d004      	beq.n	8004294 <TIM_OC3_SetConfig+0x80>
 800428a:	f641 315d 	movw	r1, #7005	; 0x1b5d
 800428e:	482f      	ldr	r0, [pc, #188]	; (800434c <TIM_OC3_SetConfig+0x138>)
 8004290:	f7fc fbdb 	bl	8000a4a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800429a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a24      	ldr	r2, [pc, #144]	; (8004344 <TIM_OC3_SetConfig+0x130>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_OC3_SetConfig+0xac>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a23      	ldr	r2, [pc, #140]	; (8004348 <TIM_OC3_SetConfig+0x134>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d12f      	bne.n	8004320 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c8:	d008      	beq.n	80042dc <TIM_OC3_SetConfig+0xc8>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <TIM_OC3_SetConfig+0xc8>
 80042d2:	f641 316a 	movw	r1, #7018	; 0x1b6a
 80042d6:	481d      	ldr	r0, [pc, #116]	; (800434c <TIM_OC3_SetConfig+0x138>)
 80042d8:	f7fc fbb7 	bl	8000a4a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e4:	d008      	beq.n	80042f8 <TIM_OC3_SetConfig+0xe4>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <TIM_OC3_SetConfig+0xe4>
 80042ee:	f641 316b 	movw	r1, #7019	; 0x1b6b
 80042f2:	4816      	ldr	r0, [pc, #88]	; (800434c <TIM_OC3_SetConfig+0x138>)
 80042f4:	f7fc fba9 	bl	8000a4a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40010000 	.word	0x40010000
 8004348:	40010400 	.word	0x40010400
 800434c:	080050bc 	.word	0x080050bc

08004350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800439a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	031b      	lsls	r3, r3, #12
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a18      	ldr	r2, [pc, #96]	; (800440c <TIM_OC4_SetConfig+0xbc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_OC4_SetConfig+0x68>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a17      	ldr	r2, [pc, #92]	; (8004410 <TIM_OC4_SetConfig+0xc0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d117      	bne.n	80043e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c0:	d008      	beq.n	80043d4 <TIM_OC4_SetConfig+0x84>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <TIM_OC4_SetConfig+0x84>
 80043ca:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 80043ce:	4811      	ldr	r0, [pc, #68]	; (8004414 <TIM_OC4_SetConfig+0xc4>)
 80043d0:	f7fc fb3b 	bl	8000a4a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	019b      	lsls	r3, r3, #6
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400
 8004414:	080050bc 	.word	0x080050bc

08004418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f023 0201 	bic.w	r2, r3, #1
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f023 030a 	bic.w	r3, r3, #10
 8004454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004476:	b480      	push	{r7}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f023 0210 	bic.w	r2, r3, #16
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	031b      	lsls	r3, r3, #12
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f043 0307 	orr.w	r3, r3, #7
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	021a      	lsls	r2, r3, #8
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	431a      	orrs	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4313      	orrs	r3, r2
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	609a      	str	r2, [r3, #8]
}
 8004540:	bf00      	nop
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a32      	ldr	r2, [pc, #200]	; (8004624 <TIM_CCxChannelCmd+0xd8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d030      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d02c      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a2f      	ldr	r2, [pc, #188]	; (8004628 <TIM_CCxChannelCmd+0xdc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d028      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a2e      	ldr	r2, [pc, #184]	; (800462c <TIM_CCxChannelCmd+0xe0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d024      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a2d      	ldr	r2, [pc, #180]	; (8004630 <TIM_CCxChannelCmd+0xe4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d020      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a2c      	ldr	r2, [pc, #176]	; (8004634 <TIM_CCxChannelCmd+0xe8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d01c      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a2b      	ldr	r2, [pc, #172]	; (8004638 <TIM_CCxChannelCmd+0xec>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a2a      	ldr	r2, [pc, #168]	; (800463c <TIM_CCxChannelCmd+0xf0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d014      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a29      	ldr	r2, [pc, #164]	; (8004640 <TIM_CCxChannelCmd+0xf4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d010      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a28      	ldr	r2, [pc, #160]	; (8004644 <TIM_CCxChannelCmd+0xf8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00c      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a27      	ldr	r2, [pc, #156]	; (8004648 <TIM_CCxChannelCmd+0xfc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d008      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a26      	ldr	r2, [pc, #152]	; (800464c <TIM_CCxChannelCmd+0x100>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <TIM_CCxChannelCmd+0x76>
 80045b8:	f641 5194 	movw	r1, #7572	; 0x1d94
 80045bc:	4824      	ldr	r0, [pc, #144]	; (8004650 <TIM_CCxChannelCmd+0x104>)
 80045be:	f7fc fa44 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d010      	beq.n	80045ea <TIM_CCxChannelCmd+0x9e>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d00d      	beq.n	80045ea <TIM_CCxChannelCmd+0x9e>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d00a      	beq.n	80045ea <TIM_CCxChannelCmd+0x9e>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d007      	beq.n	80045ea <TIM_CCxChannelCmd+0x9e>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b3c      	cmp	r3, #60	; 0x3c
 80045de:	d004      	beq.n	80045ea <TIM_CCxChannelCmd+0x9e>
 80045e0:	f641 5195 	movw	r1, #7573	; 0x1d95
 80045e4:	481a      	ldr	r0, [pc, #104]	; (8004650 <TIM_CCxChannelCmd+0x104>)
 80045e6:	f7fc fa30 	bl	8000a4a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2201      	movs	r2, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	43db      	mvns	r3, r3
 8004600:	401a      	ands	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	431a      	orrs	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40010000 	.word	0x40010000
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40010400 	.word	0x40010400
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800
 8004644:	40001800 	.word	0x40001800
 8004648:	40001c00 	.word	0x40001c00
 800464c:	40002000 	.word	0x40002000
 8004650:	080050bc 	.word	0x080050bc

08004654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a61      	ldr	r2, [pc, #388]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d027      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d022      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a5d      	ldr	r2, [pc, #372]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d01d      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a5b      	ldr	r2, [pc, #364]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a5a      	ldr	r2, [pc, #360]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a58      	ldr	r2, [pc, #352]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a57      	ldr	r2, [pc, #348]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a55      	ldr	r2, [pc, #340]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80046ae:	f240 71b1 	movw	r1, #1969	; 0x7b1
 80046b2:	4854      	ldr	r0, [pc, #336]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80046b4:	f7fc f9c9 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d01c      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d018      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b30      	cmp	r3, #48	; 0x30
 80046d6:	d014      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d010      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d00c      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b60      	cmp	r3, #96	; 0x60
 80046ee:	d008      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b70      	cmp	r3, #112	; 0x70
 80046f6:	d004      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80046f8:	f240 71b2 	movw	r1, #1970	; 0x7b2
 80046fc:	4841      	ldr	r0, [pc, #260]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80046fe:	f7fc f9a4 	bl	8000a4a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b80      	cmp	r3, #128	; 0x80
 8004708:	d008      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004712:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8004716:	483b      	ldr	r0, [pc, #236]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004718:	f7fc f997 	bl	8000a4a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004726:	2302      	movs	r3, #2
 8004728:	e05a      	b.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2202      	movs	r2, #2
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1f      	ldr	r2, [pc, #124]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d022      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004776:	d01d      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d018      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d013      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00e      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a19      	ldr	r2, [pc, #100]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d009      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a17      	ldr	r2, [pc, #92]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10c      	bne.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40001000 	.word	0x40001000
 80047fc:	40001400 	.word	0x40001400
 8004800:	40010400 	.word	0x40010400
 8004804:	080050f4 	.word	0x080050f4
 8004808:	40014000 	.word	0x40014000
 800480c:	40001800 	.word	0x40001800

08004810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0be      	b.n	80049c8 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03b      	beq.n	80048ca <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_UART_Init+0x198>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d01d      	beq.n	8004898 <HAL_UART_Init+0x60>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a5c      	ldr	r2, [pc, #368]	; (80049d4 <HAL_UART_Init+0x19c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d018      	beq.n	8004898 <HAL_UART_Init+0x60>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5b      	ldr	r2, [pc, #364]	; (80049d8 <HAL_UART_Init+0x1a0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <HAL_UART_Init+0x60>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a59      	ldr	r2, [pc, #356]	; (80049dc <HAL_UART_Init+0x1a4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00e      	beq.n	8004898 <HAL_UART_Init+0x60>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_UART_Init+0x1a8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_UART_Init+0x60>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a56      	ldr	r2, [pc, #344]	; (80049e4 <HAL_UART_Init+0x1ac>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d004      	beq.n	8004898 <HAL_UART_Init+0x60>
 800488e:	f240 1173 	movw	r1, #371	; 0x173
 8004892:	4855      	ldr	r0, [pc, #340]	; (80049e8 <HAL_UART_Init+0x1b0>)
 8004894:	f7fc f8d9 	bl	8000a4a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d037      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a8:	d032      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b2:	d02d      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048bc:	d028      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048be:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80048c2:	4849      	ldr	r0, [pc, #292]	; (80049e8 <HAL_UART_Init+0x1b0>)
 80048c4:	f7fc f8c1 	bl	8000a4a <assert_failed>
 80048c8:	e022      	b.n	8004910 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a40      	ldr	r2, [pc, #256]	; (80049d0 <HAL_UART_Init+0x198>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d01d      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3e      	ldr	r2, [pc, #248]	; (80049d4 <HAL_UART_Init+0x19c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d018      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3d      	ldr	r2, [pc, #244]	; (80049d8 <HAL_UART_Init+0x1a0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3b      	ldr	r2, [pc, #236]	; (80049dc <HAL_UART_Init+0x1a4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00e      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <HAL_UART_Init+0x1a8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d009      	beq.n	8004910 <HAL_UART_Init+0xd8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a38      	ldr	r2, [pc, #224]	; (80049e4 <HAL_UART_Init+0x1ac>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_UART_Init+0xd8>
 8004906:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800490a:	4837      	ldr	r0, [pc, #220]	; (80049e8 <HAL_UART_Init+0x1b0>)
 800490c:	f7fc f89d 	bl	8000a4a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d009      	beq.n	800492c <HAL_UART_Init+0xf4>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d004      	beq.n	800492c <HAL_UART_Init+0xf4>
 8004922:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004926:	4830      	ldr	r0, [pc, #192]	; (80049e8 <HAL_UART_Init+0x1b0>)
 8004928:	f7fc f88f 	bl	8000a4a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d009      	beq.n	8004948 <HAL_UART_Init+0x110>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800493c:	d004      	beq.n	8004948 <HAL_UART_Init+0x110>
 800493e:	f240 117b 	movw	r1, #379	; 0x17b
 8004942:	4829      	ldr	r0, [pc, #164]	; (80049e8 <HAL_UART_Init+0x1b0>)
 8004944:	f7fc f881 	bl	8000a4a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fc f9b3 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2224      	movs	r2, #36	; 0x24
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004978:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f836 	bl	80049ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40011000 	.word	0x40011000
 80049d4:	40004400 	.word	0x40004400
 80049d8:	40004800 	.word	0x40004800
 80049dc:	40004c00 	.word	0x40004c00
 80049e0:	40005000 	.word	0x40005000
 80049e4:	40011400 	.word	0x40011400
 80049e8:	08005130 	.word	0x08005130

080049ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f0:	b0c0      	sub	sp, #256	; 0x100
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	4bcf      	ldr	r3, [pc, #828]	; (8004d3c <UART_SetConfig+0x350>)
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d904      	bls.n	8004a0e <UART_SetConfig+0x22>
 8004a04:	f640 6161 	movw	r1, #3681	; 0xe61
 8004a08:	48cd      	ldr	r0, [pc, #820]	; (8004d40 <UART_SetConfig+0x354>)
 8004a0a:	f7fc f81e 	bl	8000a4a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <UART_SetConfig+0x42>
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	d004      	beq.n	8004a2e <UART_SetConfig+0x42>
 8004a24:	f640 6162 	movw	r1, #3682	; 0xe62
 8004a28:	48c5      	ldr	r0, [pc, #788]	; (8004d40 <UART_SetConfig+0x354>)
 8004a2a:	f7fc f80e 	bl	8000a4a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <UART_SetConfig+0x6e>
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d00a      	beq.n	8004a5a <UART_SetConfig+0x6e>
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a4e:	d004      	beq.n	8004a5a <UART_SetConfig+0x6e>
 8004a50:	f640 6163 	movw	r1, #3683	; 0xe63
 8004a54:	48ba      	ldr	r0, [pc, #744]	; (8004d40 <UART_SetConfig+0x354>)
 8004a56:	f7fb fff8 	bl	8000a4a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <UART_SetConfig+0x88>
 8004a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d104      	bne.n	8004a7e <UART_SetConfig+0x92>
 8004a74:	f640 6164 	movw	r1, #3684	; 0xe64
 8004a78:	48b1      	ldr	r0, [pc, #708]	; (8004d40 <UART_SetConfig+0x354>)
 8004a7a:	f7fb ffe6 	bl	8000a4a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8e:	68d9      	ldr	r1, [r3, #12]
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	ea40 0301 	orr.w	r3, r0, r1
 8004a9a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004aca:	f021 010c 	bic.w	r1, r1, #12
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	6999      	ldr	r1, [r3, #24]
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	ea40 0301 	orr.w	r3, r0, r1
 8004af8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b90      	ldr	r3, [pc, #576]	; (8004d44 <UART_SetConfig+0x358>)
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d005      	beq.n	8004b12 <UART_SetConfig+0x126>
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <UART_SetConfig+0x35c>)
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d104      	bne.n	8004b1c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b12:	f7fd f967 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 8004b16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b1a:	e003      	b.n	8004b24 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f7fd f94e 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8004b20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2e:	f040 810f 	bne.w	8004d50 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b3c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b40:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b44:	4622      	mov	r2, r4
 8004b46:	462b      	mov	r3, r5
 8004b48:	1891      	adds	r1, r2, r2
 8004b4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b4c:	415b      	adcs	r3, r3
 8004b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b54:	4621      	mov	r1, r4
 8004b56:	eb12 0801 	adds.w	r8, r2, r1
 8004b5a:	4629      	mov	r1, r5
 8004b5c:	eb43 0901 	adc.w	r9, r3, r1
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b74:	4690      	mov	r8, r2
 8004b76:	4699      	mov	r9, r3
 8004b78:	4623      	mov	r3, r4
 8004b7a:	eb18 0303 	adds.w	r3, r8, r3
 8004b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b82:	462b      	mov	r3, r5
 8004b84:	eb49 0303 	adc.w	r3, r9, r3
 8004b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b98:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	18db      	adds	r3, r3, r3
 8004ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	eb42 0303 	adc.w	r3, r2, r3
 8004bac:	657b      	str	r3, [r7, #84]	; 0x54
 8004bae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bb2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bb6:	f7fb fb25 	bl	8000204 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <UART_SetConfig+0x360>)
 8004bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	011c      	lsls	r4, r3, #4
 8004bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bd6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004bda:	4642      	mov	r2, r8
 8004bdc:	464b      	mov	r3, r9
 8004bde:	1891      	adds	r1, r2, r2
 8004be0:	64b9      	str	r1, [r7, #72]	; 0x48
 8004be2:	415b      	adcs	r3, r3
 8004be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bea:	4641      	mov	r1, r8
 8004bec:	eb12 0a01 	adds.w	sl, r2, r1
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	eb43 0b01 	adc.w	fp, r3, r1
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c0a:	4692      	mov	sl, r2
 8004c0c:	469b      	mov	fp, r3
 8004c0e:	4643      	mov	r3, r8
 8004c10:	eb1a 0303 	adds.w	r3, sl, r3
 8004c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c18:	464b      	mov	r3, r9
 8004c1a:	eb4b 0303 	adc.w	r3, fp, r3
 8004c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c36:	460b      	mov	r3, r1
 8004c38:	18db      	adds	r3, r3, r3
 8004c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	eb42 0303 	adc.w	r3, r2, r3
 8004c42:	647b      	str	r3, [r7, #68]	; 0x44
 8004c44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c48:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c4c:	f7fb fada 	bl	8000204 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <UART_SetConfig+0x360>)
 8004c58:	fba3 2301 	umull	r2, r3, r3, r1
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	2264      	movs	r2, #100	; 0x64
 8004c60:	fb02 f303 	mul.w	r3, r2, r3
 8004c64:	1acb      	subs	r3, r1, r3
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c6c:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <UART_SetConfig+0x360>)
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c7a:	441c      	add	r4, r3
 8004c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c86:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c8a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c8e:	4642      	mov	r2, r8
 8004c90:	464b      	mov	r3, r9
 8004c92:	1891      	adds	r1, r2, r2
 8004c94:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c96:	415b      	adcs	r3, r3
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	1851      	adds	r1, r2, r1
 8004ca2:	6339      	str	r1, [r7, #48]	; 0x30
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	414b      	adcs	r3, r1
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	00cb      	lsls	r3, r1, #3
 8004cba:	4651      	mov	r1, sl
 8004cbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc0:	4651      	mov	r1, sl
 8004cc2:	00ca      	lsls	r2, r1, #3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4642      	mov	r2, r8
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	eb42 0303 	adc.w	r3, r2, r3
 8004cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cea:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	18db      	adds	r3, r3, r3
 8004cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	eb42 0303 	adc.w	r3, r2, r3
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d04:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d08:	f7fb fa7c 	bl	8000204 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <UART_SetConfig+0x360>)
 8004d12:	fba3 1302 	umull	r1, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2164      	movs	r1, #100	; 0x64
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	3332      	adds	r3, #50	; 0x32
 8004d24:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <UART_SetConfig+0x360>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	f003 0207 	and.w	r2, r3, #7
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4422      	add	r2, r4
 8004d38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d3a:	e108      	b.n	8004f4e <UART_SetConfig+0x562>
 8004d3c:	00a037a0 	.word	0x00a037a0
 8004d40:	08005130 	.word	0x08005130
 8004d44:	40011000 	.word	0x40011000
 8004d48:	40011400 	.word	0x40011400
 8004d4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d62:	4642      	mov	r2, r8
 8004d64:	464b      	mov	r3, r9
 8004d66:	1891      	adds	r1, r2, r2
 8004d68:	6239      	str	r1, [r7, #32]
 8004d6a:	415b      	adcs	r3, r3
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d72:	4641      	mov	r1, r8
 8004d74:	1854      	adds	r4, r2, r1
 8004d76:	4649      	mov	r1, r9
 8004d78:	eb43 0501 	adc.w	r5, r3, r1
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	00eb      	lsls	r3, r5, #3
 8004d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d8a:	00e2      	lsls	r2, r4, #3
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	461d      	mov	r5, r3
 8004d90:	4643      	mov	r3, r8
 8004d92:	18e3      	adds	r3, r4, r3
 8004d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d98:	464b      	mov	r3, r9
 8004d9a:	eb45 0303 	adc.w	r3, r5, r3
 8004d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	008b      	lsls	r3, r1, #2
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc8:	4621      	mov	r1, r4
 8004dca:	008a      	lsls	r2, r1, #2
 8004dcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004dd0:	f7fb fa18 	bl	8000204 <__aeabi_uldivmod>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <UART_SetConfig+0x570>)
 8004dda:	fba3 2302 	umull	r2, r3, r3, r2
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	011c      	lsls	r4, r3, #4
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004df0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	61b9      	str	r1, [r7, #24]
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e04:	4641      	mov	r1, r8
 8004e06:	1851      	adds	r1, r2, r1
 8004e08:	6139      	str	r1, [r7, #16]
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	414b      	adcs	r3, r1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e1c:	4659      	mov	r1, fp
 8004e1e:	00cb      	lsls	r3, r1, #3
 8004e20:	4651      	mov	r1, sl
 8004e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e26:	4651      	mov	r1, sl
 8004e28:	00ca      	lsls	r2, r1, #3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4642      	mov	r2, r8
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e38:	464b      	mov	r3, r9
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	eb42 0303 	adc.w	r3, r2, r3
 8004e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	008b      	lsls	r3, r1, #2
 8004e60:	4641      	mov	r1, r8
 8004e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e66:	4641      	mov	r1, r8
 8004e68:	008a      	lsls	r2, r1, #2
 8004e6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e6e:	f7fb f9c9 	bl	8000204 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <UART_SetConfig+0x570>)
 8004e78:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	2164      	movs	r1, #100	; 0x64
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	3332      	adds	r3, #50	; 0x32
 8004e8a:	4a34      	ldr	r2, [pc, #208]	; (8004f5c <UART_SetConfig+0x570>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e96:	441c      	add	r4, r3
 8004e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8004ea0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ea2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	1891      	adds	r1, r2, r2
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	415b      	adcs	r3, r3
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	1851      	adds	r1, r2, r1
 8004eba:	6039      	str	r1, [r7, #0]
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	414b      	adcs	r3, r1
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ece:	4659      	mov	r1, fp
 8004ed0:	00cb      	lsls	r3, r1, #3
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed8:	4651      	mov	r1, sl
 8004eda:	00ca      	lsls	r2, r1, #3
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee8:	464b      	mov	r3, r9
 8004eea:	460a      	mov	r2, r1
 8004eec:	eb42 0303 	adc.w	r3, r2, r3
 8004ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	663b      	str	r3, [r7, #96]	; 0x60
 8004efc:	667a      	str	r2, [r7, #100]	; 0x64
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	4641      	mov	r1, r8
 8004f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f14:	4641      	mov	r1, r8
 8004f16:	008a      	lsls	r2, r1, #2
 8004f18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f1c:	f7fb f972 	bl	8000204 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <UART_SetConfig+0x570>)
 8004f26:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2164      	movs	r1, #100	; 0x64
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	; 0x32
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <UART_SetConfig+0x570>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4422      	add	r2, r4
 8004f4c:	609a      	str	r2, [r3, #8]
}
 8004f4e:	bf00      	nop
 8004f50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5a:	bf00      	nop
 8004f5c:	51eb851f 	.word	0x51eb851f

08004f60 <__libc_init_array>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4d0d      	ldr	r5, [pc, #52]	; (8004f98 <__libc_init_array+0x38>)
 8004f64:	4c0d      	ldr	r4, [pc, #52]	; (8004f9c <__libc_init_array+0x3c>)
 8004f66:	1b64      	subs	r4, r4, r5
 8004f68:	10a4      	asrs	r4, r4, #2
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	42a6      	cmp	r6, r4
 8004f6e:	d109      	bne.n	8004f84 <__libc_init_array+0x24>
 8004f70:	4d0b      	ldr	r5, [pc, #44]	; (8004fa0 <__libc_init_array+0x40>)
 8004f72:	4c0c      	ldr	r4, [pc, #48]	; (8004fa4 <__libc_init_array+0x44>)
 8004f74:	f000 f820 	bl	8004fb8 <_init>
 8004f78:	1b64      	subs	r4, r4, r5
 8004f7a:	10a4      	asrs	r4, r4, #2
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	42a6      	cmp	r6, r4
 8004f80:	d105      	bne.n	8004f8e <__libc_init_array+0x2e>
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f88:	4798      	blx	r3
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7ee      	b.n	8004f6c <__libc_init_array+0xc>
 8004f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f92:	4798      	blx	r3
 8004f94:	3601      	adds	r6, #1
 8004f96:	e7f2      	b.n	8004f7e <__libc_init_array+0x1e>
 8004f98:	0800518c 	.word	0x0800518c
 8004f9c:	0800518c 	.word	0x0800518c
 8004fa0:	0800518c 	.word	0x0800518c
 8004fa4:	08005190 	.word	0x08005190

08004fa8 <memset>:
 8004fa8:	4402      	add	r2, r0
 8004faa:	4603      	mov	r3, r0
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d100      	bne.n	8004fb2 <memset+0xa>
 8004fb0:	4770      	bx	lr
 8004fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb6:	e7f9      	b.n	8004fac <memset+0x4>

08004fb8 <_init>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	bf00      	nop
 8004fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fbe:	bc08      	pop	{r3}
 8004fc0:	469e      	mov	lr, r3
 8004fc2:	4770      	bx	lr

08004fc4 <_fini>:
 8004fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc6:	bf00      	nop
 8004fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fca:	bc08      	pop	{r3}
 8004fcc:	469e      	mov	lr, r3
 8004fce:	4770      	bx	lr
